#!/usr/bin/env bash

# ------------------------------------------------------------------------------
# This is just an example for a library installer/updater
#
# Use it like:
#       tar -xaf centauri_bash_lib-NN.tgz
#       centauri_bash_lib-NN/README.setup
#
# Or for a shared installation via sudo (use fakeroot on termux):
#       tar -xaf centauri_bash_lib-NN.tgz
#       sudo centauri_bash_lib-NN/README.setup
#
# The default paths can be overridden by passing install info as argument.
# The info argument is a string of up to 3 colon separated fields:
#
#       <base>:<tools>:<link>
#
#       <base>      # the base folder           (/var/centauri)
#       <tools>     # a folder to symlink tools (/usr/local/bin)
#       <links>     # symlink for tools folder  (/opt/centauritools)
# ------------------------------------------------------------------------------

# A root FS prefix can be set here (not needed for termux):
# export CEN_PREFIX="/some/other/root"

# Installation defaults for shared and private install - can be edited

if [ "$EUID" = 0 ] ; then                               # shared (root)
    INFO="/var/centauri:/usr/local/bin:/opt/centauritools"
else                                                    # private
    INFO="$HOME/.centauri:$HOME/bin:$HOME/centauritools" 
fi

# ------------------------------------------------------------------------------
# Run installation (no configuration parameters in this part)
# ------------------------------------------------------------------------------

# do not use predefined centauri-bash-lib root, get destination path
CEN_ROOT= 
INFO="${1:-$INFO}"                                      # cmd line override
DEST="${INFO%%:*}"                                      # destination path

# get folder of this script
ROOT="$BASH_SOURCE"
[ "${ROOT::1}" = '/' ] || ROOT="$PWD/$ROOT"
ROOT="${ROOT%/*}"
ROOT="${ROOT%/.}"

# do we have an existing installation?
if [ -d "$DEST/library" ] ; then
    SELF=update
    echo "$SELF: updating existing installation..."
else
    SELF=setup
    echo "$SELF: installing from scratch ..."
fi 1>&2

# change folder to installation source
cd "$ROOT" || exit $?
# path to find centauricreate and to load the bootstrap proxy
PORG="$ROOT/tools:$PATH"
# path to find CEN_LIBRARY for uglify optimization
PDES="$DEST/tools:$PATH"

# setup/update installation destination
PATH="$PORG" centauricreate --embed="$SELF:a" --info setup "$INFO" || exit $?

# run library installer (creates real poxy and bash completion)
echo 1>&2
PATH="$PORG" centauricreate --embed="$SELF" --info install "$INFO" || exit $?

# run autoload to check for bash loadables
PATH="$PDES" $DEST/library/autoload --builtin --embed="$SELF:a" -

# create *.p files to optimize loading speed
PATH="$PDES" $DEST/library/uglify --embed="$SELF:a" -U -D

# ------------------------------------------------------------------------------
# create an example library config file
# ------------------------------------------------------------------------------

[ "$EUID" != 0 -a ! -d "$DEST/default" ] && mkdir "$DEST/default"
if [ -d "$DEST/default" ] && [ ! -e "$DEST/default/centauri-bash-lib" ] ; then  
cat >"$DEST/default/centauri-bash-lib" <<!EOF
# This is configuration data for centauriXXXX --info install|uninstall|update

[library]
    # installation defaults (root, binaries, shortcut, repository, owner)
    defaults    private  "$DEST" \$HOME/bin \$HOME/centauritools
    defaults    shared   "$DEST" "/usr/local/bin" "/opt/centauritools"

[launcher]
    # desktop apps (- is for any desktop session, must be last)
    editor      -       kwrite featherpad
    files       -       dolphin
    browser     -       firefox falkon qml
    kiosk       -       qml falkon firefox
    httpd       -       lighttpd
    webapp      -       .

    viewer      -       qml falkon firefox

    # run a function to start the app (see terminal function)
    console     -       @terminal

    # terminal apps (tty is for non-desktop mode)
    editor      tty     nano vim
    files       tty     mc
    browser     tty     w3m
    library     -       .

    # qml needs a few hints (@_cen_win_qmlweb creates the qml script)
    -ignore:qml         qtchooser
    -path:qml           /usr/lib/*/qt5/bin/qml
    browser:qml         @launcher_qmlweb - - -
    kiosk:qml           @launcher_qmlweb 1200 800 1.2
    viewer:qml          @launcher_qmlweb - - - /var/www/html/index.html /var/centauri/html/index.html

    # lighttpd needs a script that gets the configuration
    httpd:lighttpd      @launcher_lighttpd 8080 /var/www
    -path:lighttpd      /usr/*bin/lighttpd

    # command line args
    kiosk:firefox       @launcher_html  --new-window --kiosk
    browser:firefox     @launcher_html --new-window
                        # firefox problem: if an instance is already open, a new window is created but the new
                        # process that was launched will exit. Thus we cannot wait for the window to be closed
    viewer:firefox      @launcher_html --new-window /var/www/html/index.html /var/centauri/html/index.html

    kiosk:falkon        @launcher_html --fullscreen --new-window --no-extensions --profile=kiosk
    browser:falkon      @launcher_html --new-window --no-extensions
    viewer:falkon       @launcher_html --new-window --no-extensions --profile=viewer /var/www/html/index.html /var/centauri/html/index.html

    webapp:.            @launcher_webapp
    library:.           @launcher_library

    # info text for apps (not commands)
    -info:editor        open a text editor
    -info:files         open a file manager
    -info:browser       open a web browser
    -info:kiosk         web browser in kiosk mode
    -info:viewer        html viewer (qml or browser)
    -info:console       command line terminal
    -info:httpd         launch a private web server
    -info:webapp        run a centauri-bash-lib web application
    -info:library       interactive centauri-bash-lib console

[terminal]
    # emulators for KDE/Gnome sessions:
    emulator    kde     konsole qterminal gnome-terminal xterm
    emulator    gnome   gnome-terminal konsole qterminal xterm
    # other session types (must be last emulator line):
    emulator    -       qterminal gnome-terminal konsole  xterm

    # options for emualator applications. Traditionally option -e is used to
    # run a program, add option -- for emulators that use -- instead ...
    -args:konsole       --hide-tabbar --hide-menubar --nofork
    -title:konsole      --title

    -args:gnome-terminal    --hide-menubar --wait --
    -title:gnome-terminal   --title

    -args:xterm         -fa Monospace -fs 14 -geometry 100x30

    # in many case we don't need to run an emulator, so we check our ancestors until
    #  we find something blacklisted (start emulator) or whitelisted (no emulator):

    # no emulator if we find a login shell
    login               -bash|-dash|-csh|-sh
    # continue search if ancestor is a shell
    shell               bash|dash|csh|sh
    # no emulator for these ...
    white               sudo|kdeinit.*\ konsole.*|konsole.*|gnome.*|qterminal|xterm
    # needing to launch emulator ...
    black               krunner.*|lx.*-session|plasma.*|xinit
                        # no desktop, no xroot
    black-startup       sddm.*|startkde.*|startplasma.*
                        # embedded konsole, check KONSOLE_DBUS_SERVICE
    black-konsole       dolphin.*|kde.*

[shortpath]

   # These are examples of shortcuts for centauripaths (alias ccd)

!EOF

[ -z "$PREFIX" ] && cat >>"$DEST/default/centauri-bash-lib" <<!EOF
   path "export"    "$/export"                  "Export Folder"
   path "docs"      "$/usr/share/doc"           "Linux Documentation"
!EOF

[ -n "$PREFIX" ] && cat >>"$DEST/default/centauri-bash-lib" <<!EOF
   path "bin"       "\${CEN_PATHS[1]}"           "Linux Anwendungen"
   path "etc"       "\${CEN_PATHS[2]}"           "Linux Konfiguration"
   path "docs"      "/share/doc|/usr/share/doc"  "Linux Dokumentation"
!EOF

[ -d "$HOME/storage" ] && cat >>"$DEST/default/centauri-bash-lib" <<!EOF
   path "android"   "$HOME/storage"              "Android gemeinsamer Speicer"

   path "export"    "$HOME/storage/shared/export"         "Export Verzeichnis"
   path "bilder"    "$HOME/storage/shared/export/Bilder"  "Bilder (in export)"
   path "musik"     "$HOME/storage/shared/export/Musik"   "Musik  (in export)"
   path "rezepte"   "$HOME/storage/shared/export/Rezepte" "Kochrezepte"
!EOF
fi

# ------------------------------------------------------------------------------
# installation completed
# ------------------------------------------------------------------------------
{   echo
    echo "$SELF: You may now remove: $ROOT"
} 1>&2

# done
