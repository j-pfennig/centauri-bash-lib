──────────────────────────────────────────────────────────────────────────────────────────────
Topic - Installation - Install/Update/Uninstall and Configuration
──────────────────────────────────────────────────────────────────────────────────────────────
Install:   For simplicity an example setup script is provided (see centauricreate template).
           Just unpack the source tar archive or use a cloned repository and run setup. Do not
           install as root user unless you want a 'shared' system-wide installation (see
           private or shared). centauri-bash-lib itself needs no setup program, you can do a
           manual install by running any of the included tools with --info install.

tar-file:  From https://github.com/j-pfennig/centauri-bash-lib you may download the current
           tar file and run the included setup script:

           ┃ tar -xaf centauri-bash-lib_X.XX.tgz
           ┃ # sudo -i                               # only for shared installation
           ┃ centauri_bash_lib_X.XX/setup            # automatic install -or- do a
           ┃                                         # manual install, see below...

           The setup script can also be used to update an existing installation.

git-hub:   Otherwise just clone the repository (later in this text a repository installation
           mode will be discussed):

           ┃ git clone https://github.com/j-pfennig/centauri-bash-lib.git
           ┃ # sudo -i                               # only for shared installation
           ┃ centauri-bash-lib/setup                 # automatic install -or- do a
           ┃                                         # manual install, see below...

Manual:    This section explains how to do a manual installation.

           (1.a) System-wide 'shared' installation (using root rights):

           ┃ sudo -i                             # root always installs shared
           ┃ arch="centauri_bash_lib.tgz"        # what to install
           ┃ dest="/usr/local/shared/centauri"   # where to install (CEN_ROOT)
           ┃ 
           ┃ mkdir -p "$dest"
           ┃ tar -C "$dest" -xaf "$arch" --skip-components=1
           ┃ "$dest"/tools/centauricreate --info install

           (1.b) 'Private' installation (only without root rights):

           ┃ arch="centauri_bash_lib.tgz"        # what to install
           ┃ dest=~/.centauri                    # where to install (CEN_ROOT)
           ┃ 
           ┃ mkdir -p "$dest"
           ┃ tar -C "$dest" -xaf "$arch"
           ┃ "$dest"/tools/centauricreate --info install
           ┃ ln -s "$dest" ~/centauritools --skip-components=1
           ┃ PATH+=":~/centauritools"            # add this to your ~/.bashrc

           (2) Finish a manual install by running the following steps:

           ┃ # (2.1) enable loadable bash buitins (please after installing the
           ┃ #       bash-buitins package of your distribution):
           ┃ $dest/library/autoload --builtin

           ┃ # (2.2) preprocess bash sources for a little speed-up:
           ┃ $dest/library/uglify -D -U

           ┃ # (2.3) create a initial configuration file from a template:
           ┃ centauricreate --template=config -

Uninstall: To remove _centauri_bash_lib completely type one of those:

           ┃ centauricreate --info uninstall         # uninstall with prompt

           ┃ centauricreate --info uninstall --yes   # uninstall without prompt

           WARNING: uninstall will remove the whole $CEN_ROOT tree.

Customize: The setup script and --info setup can install to custom locations by passing a
           colon separated argument string of up to five fields:

           • DEST     The installation root $CEN_ROOT (should be the path of the
                      installation folder).
           • TOOLS    <empty> -or- folder to symlink user scripts (a folder contained in
                      $PATH simplifies calling user scripts).  This field is ignored
                      if the folder is not writable.
           • ALIAS    <empty> -or- symlink to $CEN_ROOT/tools (just an  alias that should
                      be easy to remember). This field is ignored if the base folder is
                      not writable.
           • REPO     An optional repository path -or- <empty> for no repository. A value
                      of '+' tries $CEN_ROOT/admin. The setup code will symlink tools,
                      library and locale to an existing repository.
           • USER     <empty> or a [user][:group], sets the ownership of created folders.

           ┃ DEST=/var/centauri      # $CEN_ROOT hierarchie path
           ┃ TOOLS=/usr/bin          # optional: symlink tools to bin folder
           ┃ ALIAS=/opt/centauri     # optional: symlink $CEN_ROOT/tools
           ┃ REPO=<repository>       # optional: path of your repository

           ┃ setup $DEST:$TOOLS      # examples ...
           ┃ setup $DEST:$TOOLS:$ALIAS
           ┃ setup $DEST:$TOOLS:$ALIAS:$REPO

Repository:When using git or something similar, updates are simplified using the repository
           installation mode. After installation the $CEN_ROOT hierarchy will contain symlinks
           into the repository folder, e.g. the library files and tools are not copied ...

           ┃ DEST=/var/centauri      # $CEN_ROOT hierarchie path
           ┃ TOOLS=/usr/bin          # optional: symlink tools to bin folder
           ┃ ALIAS=/opt/centauri     # optional: symlink $CEN_ROOT/tools
           ┃ REPO=<repository>       # path of your repository

           ┃ # using setup ...
           ┃ $REPO/setup $DEST:$TOOLS:$ALIAS:$REPO

           ┃ # ... or manual mode
           ┃ $REPO/tools/centauripaths --info install $DEST:$TOOLS:$ALIAS:$REPO

Non-FHS:   Most Linux systems follow the FSH standard. For other implementations or to install
           into a non-root FS, for running scripts the CEN_PATHS array variable is provided.
           It is initialized by _centauri_bash_lib and has five elements:

             [0] non-FSH root prefix  (empty on FSH conformant systems)
             [1] GNU corebin folder   (usually /usr/bin)
             [2] system configuration (usually /etc)
             [3] system var folder    (usually /var)
             [4] temporary files      (usually /tmp)

           At _centauri_bash_lib load time, it checks "${CEN_PATHS[1]/bash}". If this is not
           executable (e.g. not FSH compliant) the "$BASH" variable is used to get some prefix
           (path before "/usr/bin" or "/bin"). Using this prefix the library tries to locate
           "/etc", "/var" and "/tmp". The prefix itself is saved to "$CEN_PATHS" (which is
           identical to "${CEN_PATHS[0]}").

           The GNU core utilities can be installed either at "$CEN_PATHS/usr/bin" or at
           "$CEN_PATHS/bin". The autodetected path is stored as "${CEN_PATHS[1]}".

Proxy:     Loading _centauri_bash_lib into a user script always invokes a proxy, see
           Library Proxy for details. This proxy contains some configuration information used
           to locate the library itself. Every folder containing user scripts wanting to use
           _centauri_bash_lib must contain a symlink to the proxy.

           The proxy at $CEN_ROOT/tools is recreated by the installation process. If you are
           using multiple binary folders symlink the proxy rather than creating copies.

Folders:   Parts of the folder tree shown below are added by _centauri_bash_sys. An automatic
           setup of the tree is done on the 1st execution (as root user) if the persistent
           symlink is missing. The folders for persistent and transient are only of interrest
           for tools that run as root anyhow:

           ┃ $CEN_ROOT
           ┃    ├── default     # dynamic, link or folder
           ┃    ├── html        # static, documentation
           ┃    ├── library     # static, _centauri_bash_lib code
           ┃    ├── locale      # static, translations
           ┃    ├── persistent  # dynamic, persistent cache
           ┃    ├── tools       # static, user scripts ($CEN_TOOLS)
           ┃    └── transient   # dynamic, volatile cache

           The tree shown above should be complete after (automatic) setup. The default leaf
           is a symlink to /etc/default on Debian or a folder of its own otherwise. It can be
           used for user defined configuration data.

           The following commands can be run to force a (repair) setup:

           ┃ centauricreate --info install         # setup with prompts
           ┃ centauricreate --info install --yes   # setup without prompts

Updates:   If you add own scripts to the tools folder, symlinks to the binary folder (like
           /usr/local/bin) are created this way:

           ┃ centauricreate --info update          # update binary symlinks

Remarks:   As mentioned above, there is no separate installation program. Every script that
           calls _centauri_bash_lib main() has the --info option and can be used
           (centauripaths was just used as an example).

           Verbs and options following --info must be typed exactly as documented above. They
           cannot be abbreviated and must appear in that order.

