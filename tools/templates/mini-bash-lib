#!/usr/bin/bash
CEN_LEGAL="Copyright Dr. J. Pfennig (c) 2007-2024; BSD License"
CEN_TITLE="Template for a minimal script using mini-bash-lib"

# ------------------------------------------------------------------------------
# This tool can be run without centauri-bash-lib being installed. If so it uses
# a couple of simplified library equivalents that are created below ...
# ------------------------------------------------------------------------------

# CEN_NAME=.        # uncomment this to disable autoload of _centauri_bash_lib

if [ "${CEN_NAME:--}" = '-' ] && [ -x '/usr/local/bin/_centauri_bash_lib' ] ; then
    local _cen_arg
    for _cen_arg in "$@" ; do       # option '--mini' disables _centauri_bash_lib
        case "$1" in
        --)      break ;;
        --mini*) __cen_arg='--mini' ; break ;;
        esac ; shift
    done
    [ "$_cen_arg" != '--mini' ] && . /usr/local/bin/_centauri_bash_lib -a -d -f - '0.01:4' 0
fi

# ------------------------------------------------------------------------------
# Script supporting mini-bash-lib
# ------------------------------------------------------------------------------
run() {
    [ "$#" = 0 ] && { usage ; quit -s 2 ; }

MINIMAL="${MINIMAL:-false}" ####################################################
if $MINIMAL ; then #############################################################
    quit "TODO: your code ..."
else ###########################################################################
    # example code
    if [ -n "$CEN_HOOK_MESSAGE" ] ; then
        message -p "Using centauri-bash-lib version '%s'" "${CEN_MODULES['_centauri_bash_lib']}"
    else
        message "Using mini-bash-lib version" "'$CEN_MINI_VERSION'"
    fi
    [ "$1" = '-' ] || system -- "$@"
    quit
fi #############################################################################
}

# ------------------------------------------------------------------------------
# help display
# ------------------------------------------------------------------------------
usage() {
    echo "usage: $CEN_NAME [-d] [-f] [-h] [-v] <arg>..." >&2
    [ "${CEN_TITLE:--}" = '-' ] && return
    printf '\n       %s\n' "$CEN_TITLE" >&2
}

if $MINIMAL ; then #############################################################
else ###########################################################################
# The following text is formatted for: centaurihelp -U <file>
# ------------------------------------------------------------------------------
# mini bash lib + A very minimal sub-set of centauri-bash-library
#
# Purpose: The mini-bash-lib has practical and educational use. Please always remember:
#
#, - it implements only something around 1% of _centauri_bash_lib
#, - it can be used simplify scripting and to support debugging
#, - it demonstrates some of the main design goals of _centauri_bash_lib:
#,     째    application framework: here only some option parsing, run() and usage()
#,     째    debug support: options -t|--trace and -d|--dryrun, trace()
#, - error handling: [[error()]], fatal(), quit(), system() to run commands
#, - simplify programming: folder(), splitjoin(), symlink(), confirm()
#, - reasonable console output: message(), warning(), trace()
#
# Content: The following functions and options are implemented:
#
#       confirm     [-a|-i] [-n|-y] [-p <what>] [--] <text>...
#       copy        [-f|-q] [-r] [-a] [-u] [--] <arg>...
#       create      [-r] [-t] [-c] [-v <vnam>] [--] <path>|-
#       dryrun      [-r]
#       embed       [-a|-s <vnam>] [-r] [--] <tool> <arg>...
#       error       [-a|-i] [-m|-p] [-q|-t] [--] <text>...
#       fatal       [-a|-i] [-m|-p] [--] <text>...
#       folder      [-c] [-m] [-p] [-f|-q] [--] <path>
#       main        [<opt>...] [---] [<arg>...]
#       message     [-a|-i] [-m|-p] [--] <text>...          # also: -e|-f|-w -q|-t
#       optarg      <name> <vnam>|- [-t|-f] [<valu>]
#       rename      [-f|-q] [-r] [--] <arg>...
#       remove      [-f|-q] [-r] [-d] [-o] [--] <arg>...
#       splitjoin   -j|-s <vnam>
#       symlink     [-f|-q] [-r] [-n] [-r] [--] <arg>...
#       system      [-a|-s <vnam>] [-c] [-e|-f|-q|-t|-w] [-p] [-r] [-z] [--] <tool> <arg>...
#       tmpfile     [-r] [-s <vnam>]
#       trace       [-a|-i] [-m|-p] [--] <text>...
#       warning     [-a|-i] [-m|-p] [--] <text>...
#       quit        [-a|-i] [-e|-t|-u] [-m|-p] [-s <code>] [--] <text>...
#
#+General:  The order of options is not relevant, '--' terminates the option
#           list (if not used and the next argument starts with a '-' that
#           argument is parsed as an option).
#
#   error -t        # status test
#   error -q        # test and call quit -e
#
#   quit -e         # 'terminated after error'
#   quit -t         # 'terminated'
#
#
# ------------------------------------------------------------------------------

# coexistence + Using mini-bash-lib script with centauri-bash-library installed
#
#   Option: --mini      never load _centauri-bash-lib

# template + Generating mini-bash-lib scripts with centauricreate

# run + The run function

# usage + Providing help

# ------------------------------------------------------------------------------
# confirm - prompt for console input
#
# Call:     [-a|-i] [-n|-y|-p <what>] [-d <dflt>] [-s <vnam>] [-u] [--] <text>...
#
# Options:  -a  indent automatically
#           -i  always indent
#           -n  yes/No prompt, short for: -p ' [y/N]? ' -d 'no'
#           -p  appended to prompt text if not '-'
#           -s  save reply to <vnam> variable
#           -u  allow upper case characters in reply
#           -y  Yes/no prompt, short for: -p ' [n/Y]? ' -d 'yes'
#
# Arguments:<dflt>
#           <text>
#           <what>  -       ask for free text input
#                   +       asl for a password (no echo)
#                   .       append ' [<dflt>]: ' to prompt text
#                   <text>  append ' <dflt> ' to prompt text
#
# Return:   ...
#
#+Remarks:  The options --yes/--no passed to main cause prompts to be not shown
#           and with the following result:
#
#           --no    confirm always returns false
#           --yes   accept the default answer (as if <return> were hit)
#
# Examples: confirm -p '.' -d 'good' 'How do you feel today'
#
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# copy - conveniency wrapper for corutils 'cp'
#
# Call:     copy [-f|-q] [-r] [-a] [-u] [--] <arg>...
#
# Options:  -a  run 'cp -a' (archive)
#           -f  make errors fatal
#           -q  do not report errors
#           -r  ignore --dryrun
#           -u  run 'cp -u' (update)
#
#           options not listed above are ignored
#
# Arguments:<arg>   all arguments are literally passed to 'cp'
#
# Return:   The status of 'cp' or **false** with --dryrun
#
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# dryrun - test for option --dryrun, generate trace message
#
# Call:     dryrun [-r] [--] <text>...
#
# Options:  -r  ignore --dryrun (return **false**)
#
#           options not listed above are ignored
#
# Arguments:<text>  text for --dryrun [[trace()]] message
#
# Return:   **true** for --dryrun, **false** otherwise
#
#.Examples: dryrun "skip some steps" && return
#
#.          if ! dryrun "Create file list:" "$PWD" ; then
#.              ls -1 > "$tmpfile"
#.          fi
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# embed - run another script like a sub-routine
#
# Call:     embed [-a|-s <vnam>] [-r] [--] <tool> <arg>...
#
# Options:  -a  return output as array of lines in <vnam>
#           -r  ignore --dryrun
#           -s  return output as a single line in <vnam>
#
# Arguments:<tool>  a mini-bash-lib or centauri-bash-lib script to be run
#           <arg>   options or arguments passed to the script
#
# The current script name is passed to <tool> as --embed=$CEN_NAME.
#
#+Return:   The return code of <tool> unless 3 (abort). In the later case
#           embed() does call "quit째-s째3".
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# error - output an error message
#
# Call:     error [-a|-i] [-m|-p] [-q|-t] [--] <text>...
#
# Options:  -a  auto-indent (e.g. do not repeat to script name)
#           -i  always indent
#           -m  multi-line output (one line per <text> argument)
#           -p  printf formatting (1st <text> arg. is format)
#           -q  call [[quit -q]] if a previous error has occurred
#           -t
#
# Arguments:...
#
# Return:   ...
#
#.Examples: system    cmd1
#.          system -t cmd2
#.          error -q "A previous command has failed"
#
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# fatal - output a fatal error message and quit
#
# Call:     fatal [-a|-i] [-m|-p] [--] <text>...
#
# Options:  ...
#
# Arguments:...
#
# Return:   ...
# ------------------------------------------------------------------------------
#       error       [-a|-i] [-m|-p] [-q|-t] [--] <text>...
#       fatal       [-a|-i] [-m|-p] [--] <text>...
#       folder      [-c] [-m] [-p] [-f|-q] [--] <path>
#       main        [<opt>...] [---] [<arg>...]
#       message     [-a|-i] [-m|-p] [--] <text>...          # also: -e|-f|-w -q|-t
#       optarg      <name> <vnam>|- [-t|-f] [<valu>]
#       rename      [-f|-q] [-r] [--] <arg>...
#       remove      [-f|-q] [-r] [-d] [-o] [--] <arg>...
#       splitjoin   -j|-s <vnam>
#       symlink     [-f|-q] [-r] [-n] [-r] [--] <arg>...
#       system      [-a|-s <vnam>] [-c] [-e|-f|-q|-w] [-p] [-r] [-z] [--] <tool> <arg>...
#           todo: -t
#
#       tmpfile     [-r] [-s <vnam>]
#       trace       [-a|-i] [-m|-p] [--] <text>...
#       warning     [-a|-i] [-m|-p] [--] <text>...
#       quit        [-a|-i] [-e] [-m|-p] [-s <code>] [-t] [--] <text>...

fi #############################################################################

if [ -z "$CEN_HOOK_MESSAGE" ] ; then                # have no centauri-bash-lib
    CEN_OPT_DRYRUN=         # option -d
    CEN_OPT_FORCE=          # option -f
    CEN_VERB=1              # option -v
    CEN_EXIT=0              # exit code
    CEN_NAME="${BASH_SOURCE##*/}"
    CEN_MINI_VERSION='0.01'

    message() {
        local _pref="$CEN_NAME:"
        while [ "${1::1}" = '-' ] ; do
            case "$1" in
            --) shift ; break ;;
        #   -a)
            esac ; shift
        done
        [ -z "$*" ] && return 0
        echo "$_pref" "$@" >&2
    }

    trace() {
        [ "$CEN_VERB" -lt 2 ] && return 0
        while [ "${1::1}" = '-' ] ; do shift ; done
        echo "${CEN_NAME//?/ }  $*" >&2
    }

    dryrun() {
        [ -z "$CEN_OPT_DRYRUN" ] && return 1
        while [ "${1::1}" = '-' ] ; do shift ; done
        trace "dryrun:" "$@" ; return 0
    }

    # simplified error message: [-q|-t] <text>...
    error() {
        local _fqui _ferr="ERROR" _fexi=1
        while [ "${1::1}" = '-' ] ; do
            case "$1" in
            --) shift ; break ;;
            -i) _pref="${_pref//?/ }" ;;
            -f) _ferr="FATAL ERROR" ; _fexi=3 ;;
            -w) _ferr="WARNING" ; _fexi=0 ;;
            -q) _fqui=1 ;;
            -t) [ "${CEN_EXIT}" = 0 ] && return 0 || return 1
            esac ; shift
        done
        if [ -n "$_fqui" ] ; then
            [ "${CEN_EXIT}" = 0 ] && return 0
            quit -e "$@"
        fi
        echo "$CEN_NAME: ***$_ferr***" "$@" >&2
        [ "$_fexi" = 0 ] && return 0
        [ "$_fexi" = 1 ] && { CEN_EXIT=1 ; return 1 ; }
        exit $_fexi
    }

    fatal()   {  while [ "${1::1}" = '-' ] ; do shift ; done ; error -f "$@" ; }
    warning() {  while [ "${1::1}" = '-' ] ; do shift ; done ; error -w "$@" ; }

    # yes/no confirm: [-y|-n] [-a|-i] <text>...
    confirm() {
        local oind yesn='[Y/n]' defn=0
        while [ "${1::1}" = '-' ] ; do
            case "$1" in
            --) shift ; break ;;
            -i) oind=1 ;;
            -n) yesn='[y/N]' ; defn=1 ;;
            esac ; shift
        done

        if [ -n "$oind" ] ; then
            read -p "${CEN_NAME//?/ }  $* $yesn "
        else
            read -p "$CEN_NAME: $* $yesn "
        fi
        [ "${REPLY::1}" = 'y' ] && return 0
        [ "${REPLY::1}" = 'n' ] && return 1
        return "$defn"
    }

    embed() {
        while [ "${1::1}" = '-' ] ; do shift ; done
        local prog="$1" ; shift
        system -r "$prog" ${CEN_OPT_DRYRUN:+--dryrun} --embed="$CEN_NAME" "$@"
    }

    folder() {
        local ochg omak oqui
        while [ "${1::1}" = '-' ] ; do
            case "$1" in
            --) shift ; break ;;
            -c) ochg=1 ;;
            -m) omak=1 ;;
            -q) oqui=1 ;;
            esac ; shift
        done
        if [ -d "$1" ] ; then
            [ -z "$ochg" ] && return 0
            system -r cd "$1" ; return
        elif [ -n "$omak" ] ; then
            system mkdir -p "$1" ; return
        fi
        [ -z "$oqui" ] && error "Not a folder:" "$1"
        return 1
    }

    splitjoin() {
        local _splt _join
        while [ "${1::1}" = '-' ] ; do
            case "$1" in
            --) shift ; break ;;
            -s) shift ; _splt="$1" ;;
            -j) shift ; _join="$1" ;;
            esac ; shift
        done
        if [ -n "$_splt" ] ; then
            read -ra "$_splt" <<<"$*"
        elif [ -n "$_splt" ] ; then
            printf -v "$_join" '%s' "$*"
        fi
        return 0
    }

    symlink() {
        local nock
        while [ "${1::1}" = '-' ] ; do
            case "$1" in
            --) shift ; break ;;
            -n) nock='-f' ;;
            esac ; shift
        done
        [ "$1" -ef "$2" ] && return 0
        system ln -s $nock -- "$@"
    }

    system() {
        local _fqui _frun
        while [ "${1::1}" = '-' ] ; do
            case "$1" in
            --) shift ; break ;;
            -e|-p) ;;
            -q) _fqui=1 ;;
            -r) _frun=1 ;;
            esac ; shift
        done

        [ -z "$_frun" ] && dryrun "$@" && return 1
        trace "system: $@"
        if [ -n "$_fqui" ] ; then
            "$@" &>/dev/null ; return
        else
            "$@" && return 0
        fi
        error "Running '$1' failed (status $?)"
    }

    # terminate execution
    quit() {
        local _mesg='message'
        while [ "${1::1}" = '-' ] ; do
            case "$1" in
            --) shift ; break ;;
            -e) _mesg='error' ;;
            -s) shift ; CEN_EXIT="${1:-2}"
            esac ; shift
        done
        $_mesg "$*"
        exit "$CEN_EXIT"
    }

    # minimalistic option parsing ('---' stops the parser)
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        ---)         break ;;
        -d|--dry*)   CEN_OPT_DRYRUN=1 ;;
        -f|--for*)   CEN_OPT_FORCE=1 ;;
        -h|--help)   usage ; exit 2 ;;
        -v|--ver*)   CEN_VERB=2 ;;
        --info)      printf "mini-bash-lib; '%s; %s'\n" "$CEN_MINI_VERSION" "$CEN_LEGAL" >&2
                     quit ;;
        --mini*)     ;;
        *)  break
        esac ; shift
    done
    run "$@" ; exit                         # using mini-bash-lib
elif [ -n "$CEN_STAGE" ] ; then
    run "$@"                                # we got sourced
else
    main "$@" ; quit                        # using centauri-bash-lib
fi

# end
