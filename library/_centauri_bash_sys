#!/bin/bash
# ------------------------------------------------------------------------------
# _centauri_bash_sys = centauri-bash-lib: OS integration support
#
# Call:     . _centauri_bash_sys [-n]
#
# Options:  -n  do not initialize
#
# Variables:The module sets the following values at load time:
#
#,      CEN_SYS_STATE_DIR="$CEN_ROOT/persistent"    # non-volatile
#,      CEN_SYS_CACHE_DIR="$CEN_ROOT/transient"     # volatile
#,      CEN_SYS_STATE_FILE="$CEN_SYS_STATE_DIR/centaurisystem"
#
# Loading this module without -n option causes [[sysversion()]]
# to be run.  This is used by **_centauri_bash_lib** to trigger a minimal
# setup if the calling user is root. The [[sysversion()]] is cached (when the
# caller is root).
#
# The module also implements the --info command line option. This allows the
# invokation of [[syssetup()]] to update or remove **_centauri_bash_lib**.
#
# This module may load some other modules on demand:
#
#,      [[_centauri_bash_sys]]                       § module loading runs ...
#,      °  └── [[sysversion()]]                      § ... by default
#
#,      [[sysversion()]]                             § optional ...
#,      °  └── [[_centauri_bash_ins]]
#
#,      [[sysinfo()]]
#,      °  └── [[syssetup()]]                        § optional ...
#,      °         ├── [[_centauri_bash_ins]]
#,      °         │       └── [[_centauri_bash_ext]]
#,      °         └── [[_centauri_bash_iom]]
#,      °                 └── [[_centauri_bash_ext]]
#
#,      [[sysconfig()]]                              § depends ...
#,      °  └── [[_centauri_bash_run]]
#,      °         └── [[_centauri_bash_iom]]
#,      °                 └── [[_centauri_bash_ext]]
#
#,      [[syssetup()]]
#,      °  └── [[_centauri_bash_ext]]
#
# Copyright Dr. J. Pfennig (c) 2019-2022
# ------------------------------------------------------------------------------

CEN_MODULES["_centauri_bash_sys"]="0.25:1"

CEN_SYS_STATE_DIR="$CEN_ROOT/persistent"    # non-volatile
CEN_SYS_CACHE_DIR="$CEN_ROOT/transient"     # volatile
CEN_SYS_STATE_FILE=                         # sysversion

# ------------------------------------------------------------------------------
# data in CEN_SYS_STATE_FILE
# ------------------------------------------------------------------------------

CEN_SYS_CONFIG=                 # distro config file/folder
CEN_SYS_DISTRO=                 # distribution name
CEN_SYS_FAMILY=                 # distribution family
CEN_SYS_NICKNAME=               # distribution nick name
CEN_SYS_ALIAS=                  # distribution alias
CEN_SYS_VERSION=                # distribution version (sortable)

CEN_SYS_KDEVERS=                # kde main version (sortable)
CEN_SYS_PLASMA=                 # kde plasma version (sortable)
CEN_SYS_QTVERS=                 # qt version (sortable)

# ------------------------------------------------------------------------------
# default data for sysconfig (overridden by config file)
# ------------------------------------------------------------------------------

CEN_SYS_INCLUDE=()              # include list for link tools
                                # (centauri* are automatically included)
                                # exclude list for link tools ...
CEN_SYS_EXCLUDE=("centauri*_*" "*.*" "*~" "*[ABCDEFGHIJKLMNOPQRSTUVWXYZ]*")
CEN_SYS_OBSOLETE=()             # obsolete tool files, remove links
CEN_SYS_SERVICE=()              # list of service tools to be installed/enabled
CEN_PATH_REXP=()                # list of path replacements
CEN_ROOTDEFS=()                 # see _cen_sys_rootdefs

# ------------------------------------------------------------------------------
# fill CEN_ROOTDEFS from CEN_INSTALL: [<rootdefs>]
# ------------------------------------------------------------------------------
_cen_sys_rootdefs() {
    [ -n "$CEN_ROOTDEFS" -a "${1:--}" = '-' ] && return 0
    embed -m '_centauri_bash_ins'
    _cen_sys_rootdefs "$1"
}

# ------------------------------------------------------------------------------
# get list of tools
# ------------------------------------------------------------------------------
_cen_sys_tools() {
    [ -n "$CEN_SYS_TOOLS" ] && return                   # already defined
    CEN_SYS_TOOLS=("$CEN_TOOLS/_centauri_bash_lib")     # must include proxy
    local farg fexc
    for farg in "$CEN_TOOLS"/centauri* ; do             # autoinclude: centauri*
        for fexc in "${CEN_SYS_EXCLUDE[@]}" ; do
            [[ "${farg##*/}" == $fexc ]] || continue
            farg= ; break
        done
        [ -n "$farg" ] && CEN_SYS_TOOLS+=("$farg")
    done
    for farg in "${CEN_SYS_INCLUDE[@]}" ; do            # add extra includes
        farg="$CEN_TOOLS/$farg"
        for fexc in "${CEN_SYS_TOOLS[@]}" ; do
            [ "$farg" = "$fexc" ] || continue
            farg= ; break
        done
        [ -n "$farg" ] && CEN_SYS_TOOLS+=("$farg")
    done
}

# ------------------------------------------------------------------------------
# sysversion - determine os/kde versions, read/write version file
#
# Call:     sysversion [-k] [-o] [-r|-u|-w]
#
# Options:  -k  update kde version
#           -m  print version info
#           -o  update os version
#           -r  read state file (default, no updates)
#           -u  like read but update if needed
#           -v  generate trace messages
#           -w  write state file
#
# Variables:The function tries to obtain the following data:
#
#,          CEN_SYS_CONFIG   -  distro config file/folder
#,          CEN_SYS_DISTRO   -  distribution name
#,          CEN_SYS_FAMILY   -  distribution family
#,          CEN_SYS_NICKNAME -  distribution nick name
#,          CEN_SYS_ALIAS    -  distribution alias
#,          CEN_SYS_VERSION  -  distribution version (sortable)
#
#,          CEN_SYS_KDEVERS  -  KDE main version (sortable)
#,          CEN_SYS_PLASMA   -  KDE plasma version (sortable)
#,          CEN_SYS_QTVERS   -  QT version (sortable)
#
# Storage:  CEN_SYS_STATE_FILE="$CEN_SYS_STATE_DIR/centaurisystem"
#
#+Default:  The following applies when sysversion is called without any option
#
#,          - version information already loaded: return **true**
#,          - the caller is root: update persistent state as needed
#,          - non-root caller: try persistent state or locally cached state
#
#+It is not possible to determine the KDE-Plasma version if KDE is not
# running. If so the function tries next time when running under KDE.
# ------------------------------------------------------------------------------
sysversion() {

    # get state file path: -r|-w
    _cen_sys_state() {
        CEN_SYS_STATE_FILE="$CEN_SYS_STATE_DIR/centaurisystem"
        if [ "$EUID" = 0 ] ; then               # root uses CEN_SYS_STATE_DIR
            [ -r "$CEN_SYS_STATE_FILE" ] && return 0
            if [ -d "$CEN_SYS_STATE_DIR" ] ; then
                [ "$1" = '-w' ] && return 0
                CEN_SYS_STATE_FILE= ; return 1  # must rewrite
            fi
            $CEN_TRACE -c " missing" -- "$CEN_SYS_STATE_DIR"
        fi

        local _usta
        if folder -s _usta -u config ; then     # user config folder
            _usta+='/centaurisystem'
            $CEN_TRACE2 -c " user" -- "$_usta"
            if [ "$1" = '-w' ] ; then
                CEN_SYS_STATE_FILE="$_usta" ; return 0
            elif [ "$_usta" -nt "$CEN_SYS_STATE_FILE" ] ; then
                CEN_SYS_STATE_FILE="$_usta" ; return 0
            elif [ -r "$_usta" ] ; then
                return 0
            fi
        fi
        $CEN_TRACE -c " failed" -- "$_usta"
        CEN_SYS_STATE_FILE= ; return 1          # error
    }

    ### main ###

    local _flgk _lfgo _flgu _flgw _otra=":"
    if [ $# = 0 ] ; then
        [ -n "$CEN_SYS_VERSION" ] && return 0       # do nothing if state is loaded
        [ "$EUID" = 0 ] && _flgu=1 || _flgw=0       # only root does implicit update
    fi
    while [ "${1::1}" = "-" ] ; do
      case "$1" in
      --)   shift ; break ;;
      -k)   _flgk=1 ;;
      -m)   _otra="message" ;;
      -o)   _flgo=1 ;;
      -r)   _flgw=0;;
      -u)   _flgu=1 ;;
      -v)   _otra="trace" ;;
      -w)   _flgw=1 ; _flgo=1 ; _flgk=1 ;;
      *)    _cen_abort - "$1"
      esac ; shift
    done

    if _cen_sys_state -r ; then                     # have state...
        if [ -z "$CEN_SYS_VERSION" ] ; then
            $CEN_TRACE -a $"Loading OS and KDE versions:" "$CEN_SYS_STATE_FILE"
            . "$CEN_SYS_STATE_FILE"
            [ "$_flgw" = 0 ] && _flgw=              # no forced re-read
        fi
    elif [ "$_flgw" = 0 ] ; then                    # readonly
        $CEN_TRACE -a $"Must query OS and KDE versions (no state file)"
        _flgw=1
    fi

    [ -z "$CEN_SYS_VERSION" ] && _flgo=1
    [ -z "$CEN_SYS_KDEVERS" -o "$CEN_SYS_PLASMA" = '000.000.000' ] && _flgk=1

    # implicit updates
    if [ -z "$_flgw" ] ; then
        if [ "$CEN_TOOLS/_centauri_bash_lib" -nt "$CEN_SYS_STATE_FILE" ] ; then
            _flgo=1 ; _flgk=1 ; _flgw=1
        elif [ -n "$_flgu" ] ; then
            [ -n "$_flgo" -o -n "$_flgk" ] && _flgw=1
        fi
    fi

    # refresh data
    [ -z "$_flgo" -a -z "$_flgk" -a -z "$_flgw" ] && return 0
    embed -m '_centauri_bash_ins'
    [ -n "$_flgo" ] && _cen_ins_version -s
    [ -n "$_flgk" ] && _cen_ins_version -k

    # write state file
    if [ "$_flgw" = 1 ] ; then
        if ! _cen_sys_state -w ; then               # get file
            warning $"Cannot write version info:" "$CEN_SYS_STATE_FILE"
        else
            $CEN_TRACE -a $"Writing version info:" "$CEN_SYS_STATE_FILE"
             _cen_ins_version -w "$CEN_SYS_STATE_FILE"
        fi
    fi
}

# ------------------------------------------------------------------------------
# syssetup - Setup/remove folders and links and services
#
# Call:     syssetup [-i] [-r] [-s] [-n|-p|-t|-u] [<rootdef>|-]
#
# Options:  -i  initialize         (sysinfo install)
#           -n  copy library files (sysinfo refresh)
#           -p  setup paths only
#           -r  remove, uninstall  (sysinfo uninstall)
#           -s  update services    (always needs root rights)
#           -t  check CEN_ROOT setup
#           -u  silent update      (sysinfo update)
#               do not configure services, no questions
#
#+Rootdef:  A colon seperated list of paths, that can be used to override
#           the "defaults shared" or "defaults private" config entries in
#           section **[library]** of **centauri-bash-lib**:
#
#,          <root>**:**<binaries>**:**<shortcut>**:**<repository>**:**<user>**:**<group>
#
#+          Not all fields need to be specified, and <repository> is not
#           interpreted by the library itself (might be used to specify a
#           network location).
#
# Setup:    The setup process has the following steps:
#
#           (1) Setup $CEN_ROOT folders and links (automatic, implicit)
#           (2) Symlink tools to a bin folder like "/usr/local/bin"
#           (3) Symlink $CEN_ROOT/tools to a folder like "/opt/centauritools"
#           (4) Installing services (**SysV** or **systemd**)
#           (5) Generating the _centauri_bash_lib proxy (automatic)
#           (6) Registering for **bash** auto completion (automatic)
#
#+          The uninstall process reverts all setup steps.
#
#+          A shallow setup (step 1 only) is performed with option -p and is
#           for use by tools that install the library from a repository. The
#           tools will use option -u to run step 2 after updates from the
#           repository.
#
#+          The syssetup function can be invoked from every **centauritool** via
#           command line option --info. See [[sysinfo()]] for details.
# ------------------------------------------------------------------------------
syssetup() {
    $CEN_DEBUG -c -- "$*"
    local _stat=0 _warn  _remv _updt _usrv
    while [ "${1::1}" = "-" ] ; do
      case "$1" in
      --)   shift ; break ;;
      -[nptu])
            _updt="$1" ;;
      -i)   ;;
      -r)   _remv="-r" ;;
      -s)   _usrv="-s" ;;
      *)    _cen_abort - "$1"
      esac ; shift
    done

    # initial install config is expected in CEN_ROOTDEFS
    _cen_sys_rootdefs "$1" || return 1              # also load _centaur_bash_ins

    if [ "$_updt" = '-n' ] ; then                   # copy library files
        _cen_ins_files ; return                     # return status
    fi || :

    # sysconfig, is called twice during setup as the config file may have changed
    sysconfig "${1:+-k}" || return 1

    local _root="$CEN_ROOT" _base="$CEN_TOOLS" _libr="$CEN_LIBRARY"
    CEN_ROOT="$CEN_ROOTDEFS" ; CEN_TOOLS="$CEN_ROOT/tools" ; CEN_LIBRARY="$CEN_ROOT/library"
    splitjoin -j CEN_INSTALL -d ':' -i CEN_ROOTDEFS
    $CEN_TRACE -a $"Installation configuration:" "$CEN_INSTALL"

    {   _cen_ins_library $_remv $_updt $_usrv       # run update/install
        _stat=$? ; [ "$_stat" = 128 ] && return 128 # cancelled
    } || :

    if [ -z "$_remv" -a "$_updt" != "-t" ] ; then
        local _fold="$PWD"
        folder -c -f '/'                            # don't block CEN_ROOT
        if [ -n "$_updt" ] ; then                   # update only (see centauriconfig)
            sysconfig -u
        else
            sysversion -u ; sysconfig -c -p -s
        fi
        folder -c -q -- "$_fold"                    # restore saved folder
    fi || :                                         # ignore errors

    CEN_ROOT="$_root" ; CEN_TOOLS="$_base" ; CEN_LIBRARY="$_libr"
    return $_stat
}

# ------------------------------------------------------------------------------
# sysinfo - implements --info to update or remove _centauri_bash_lib
#
# Call:     (1) sysinfo [**version**|**detailed**]
#           (2) sysinfo [**install**|**uninstall**|**update**] <root> [**noquit**]
#           (3) sysinfo **refresh**|**setup** <repo>|- <dest>|- [**noquit**]
#
#+General:  This is the implementation of command line option **--info**. The sysinfo
#           function is invoked from option processsing in [[main()]]. It should not be
#           used as an API, call [[syssetup()]] instead.
#
#+          The argument following the **--info** option is interpreted as keyword
#           to determine an action. Form (1) outputs various version information and
#           terminates execution via quit(). Form (2) handles symlinking into system
#           folders and (un)registering system services. Form (3) is used to copy all
#           files from <repo> to <dest> (with **setup**) or to udate existing files
#           (with **refresh**). See [[Installation]] for more usage details.
#
# Keywords: **detailed**  § detailed version info, see [[_centauri_bash_use]]
#           **install**   § install centauri-bash-library globally
#           **refresh**   § re-import library files from repository
#           **setup**     § import library files from repository
#           **update**    § update the installation
#           **uninstall** § uninstall centauri-bash-library
#           **version**   § show/update OS and KDE versions
#
# Arguments:<dest>        § destination (later becoming CEN_ROOT)
#           <repo>        § origin (probably the current CEN_ROOT)
#           <root>        § override defaults, see [[syssetup]]
#
#+All arguments other than "version" and "detailed" invoke [[syssetup()]]. Unless
# **noquit** is specified (form (2) and form (3) only), the function calls [[quit()]]
# and never returns.
# ------------------------------------------------------------------------------
sysinfo() {
    $CEN_DEBUG -c -- "$*"
    local _dopt _iopt _fnoq _stat=0
    # help should not advertise the 'detailed' command
    local _cmds='help install paths refresh setup uninstall update version'
    case "$1" in
        "")        ;;
        help|-)    quit -m $"Valid --info arguments are:" '\n' "$_cmds" ;;
        install)   _iopt="-i" ;;
        paths)     _iopt='-p' ;;
        refresh)   _iopt="-n" ;;
        setup)     _iopt="-n" ; CEN_OPT_FORCE=1 ;;
        uninstall) _iopt="-r" ;;
        update)    _iopt="-u" ;;
        detailed)  _dopt=1 ;;
        ver*)      sysversion -m -o -k ; quit ;;
        *)         fatal -m $"Bad --info argument. Valid commands are:" '\n' \
                            'detailed' "$_cmds"
    esac

    if [ "$_iopt" = '-p' ] ; then
        for _stat in CEN_ROOT CEN_LIBRARY CEN_TOOLS CEN_INSTALL \
                     CEN_PATHS[0] CEN_PATHS[1] CEN_PATHS[2] CEN_PATHS[3] CEN_PATHS[4] \
                     XDG_RUNTIME_DIR TMPDIR PATH ; do
           eval set -- \${$_stat}
           message -a -c "$_stat" -- "$1"
        done
        quit
    elif [ -n "$_iopt" ] ; then                     # setup actions
        if [ "$_iopt" = '-n' ] ; then
            [ -z "$2" ] && fatal $"Missing argument:" '<repo>'
            [ -z "$3" ] && fatal $"Missing argument:" '<dest>'
            [ "$2" = '-' ] && set -- "$1" "$CEN_ROOT" "$3" "$4"
            folder -f -- "$2" ; set -- "$1" "$3" "$4"
        fi
        syssetup $_iopt -- "$2" || _stat=$?
        [ "$3" = 'noquit' ] && return $_stat
        case $_stat in
            0)      quit -a "${1^}" $"succeeded" ;;
            128)    quit -s 1 ;;
            *)      quit -s 2 -a "${1^}" $"failed"
        esac
    fi
                                                    # output information and quit
    local _call _mesg=$"<unknown author/license>"
    _mesg="${CEN_LEGAL:-$_mesg}"
    if [ -n "$_dopt" ] ; then
        if [ -n "$CEN_FEATURE_T" ] ; then           # translate title...
            local _titl ; export TEXTDOMAINDIR
            system -q -s _titl -- gettext -d "$CEN_NAME" "$CEN_TITLE" && CEN_TITLE="$_titl"
        fi
        echo "${CEN_TITLE:--}"
        echo "${CEN_VERSION:--}"
        echo "$_mesg"
    else
        system -q -s _call -- readlink -f "$0"
        echo -e "${_call:-$0}; $CEN_VERSION; $_mesg"
    fi
    quit
}

# ------------------------------------------------------------------------------
# sysconfig - read library config, generate bash completion and proxy
#
# Call:     sysconfig [-c|-p]
#
# Options:  -c  generate bash completion
#           -k  keep CEN_ROOTDEFS unchanged (internal use by syssetup)
#           -p  generate the centauri-bash-lib proxy
#           -s  check if systemd is to be used
#           -u  update if neccessary
#
#+Reads the **[library]** section of **$CEN_ROOT/default/centauri_bash_lib**
# (for Debian this path is equal to **/etc/default/centauri_bash_lib**).
# Configuration file data overrides the built-in default configuration.
#
#+Optionally **_centauri_bash_completion** and the **_centauri_bash_lib** proxy
# can be generated.
# ------------------------------------------------------------------------------
sysconfig() {
    $CEN_DEBUG -c -- "$*"

    # --- get config ---

    # reader callback: <line>
    _cen_sys_read() {
        set -f ; eval set -- $1 ; set +f ; local _skey="$1" ; shift
        $CEN_TRACE2 "[library] $_skey $*"

        # reset statements
        [ $# = 0 ] &&
            case "$_skey" in
                include)   CEN_SYS_INCLUDE=()  ; return 0 ;;
                exclude)   CEN_SYS_EXCLUDE=()  ; return 0 ;;
                obsolete)  CEN_SYS_OBSOLETE=() ; return 0 ;;
                service)   CEN_SYS_SERVICE=() ; return 0 ;;
                repath)    CEN_PATH_REXP=() ; return 0 ;;
            esac

        # append statements
        case "$_skey" in
            include)   CEN_SYS_INCLUDE+=("$@") ;;
            exclude)   CEN_SYS_EXCLUDE+=("$@") ;;
            obsolete)  CEN_SYS_OBSOLETE+=("$@") ;;
            service)   CEN_SYS_SERVICE+=("$@") ;;
            defaults)  configfile -w "sysconfig" 3 6 $# || return 0
                       if [ "$1" = 'shared' ] ; then
                           [ "$EUID" = 0 ] || return 0 ;
                       elif [ "$1" = 'private' ] ; then
                           [ "$EUID" = 0 ] && return 0 ;
                       else
                           configfile -w "sysconfig" ; return 0
                       fi
                       [ -n "$_kopt" ] && return 0
                       splitjoin -j _skey -d ':' -- "${@:2}"
                       _cen_sys_rootdefs "$_skey"
                       ;;
            repath )   configfile -w "sysconfig" 3 + $#
                       trimjoin -d $'\a' -- "$@" ; CEN_PATH_REXP+=("$CEN_TRIMJOIN")
                       ;;
            *)         configfile -w "sysconfig"
        esac
        return 0
    }

    # --- bash completion ---

    _cen_sys_completion() {
        local _tool _item
        while [ $# -gt 0 ] ; do
            _item="${1##*/}" ; shift
            [ "$_item" = "_centauri_bash_lib" ] || _tool+=" '$_item'"
        done
        create -h "centauritools" -t -w "$CEN_LIBRARY/_centauri_bash_completion" 664 <<!EOF
# custom completion function
_centauri_bash_lib_compl() {
    # completion of options
    if [ "\${2::1}" = '-' ] ; then
        local _xall="\$(CEN_COMPLETION=opts \$1 --help) --info --help --verbose --quiet"
        COMPREPLY=(\$(compgen -W "\$_xall" -- \$2))
        # no space for option argument
        if [ "\${#COMPREPLY[@]}" = "1" ] ; then
            [ "\${COMPREPLY:\${#COMPREPLY}-1}" = "=" ] && compopt -o nospace
        fi

    # filenames or verbs
    else
        compopt -o filenames

        # forced filename completion
        if [ "\${2::1}" = "." ] ; then
            :
        # filename completion after verb (bash bug, needs && here)
        elif [ -z "\${3//[a-z]/}" ] && [ "\$1" != "\$3" ] ; then
            :
        # do verb completion: <prog> <input> <context>
        else
            local _xall=\$(CEN_COMPLETION="verb:\$3" \$1 --help)
            COMPREPLY=(\$(compgen -W "\$_xall" -- \$2))
            [ -n "\$COMPREPLY" ] && return
        fi

        local _sifs="\$IFS" ; IFS=\$'\\n'
        COMPREPLY=(\$(compgen -o default -- "\$2")) ; IFS="\$_sifs"
    fi
}

# register the completion function
complete -X "@(.[^/]*|./.*)" -F _centauri_bash_lib_compl $_tool
!EOF
    }

    # --- check for systemd ---

    _cen_sys_systemd() {
        local _sysi="$CEN_PATHS/sbin/init" _sysd="${CEN_PATHS[2]}/systemd"
        # strong systemd evidence: have systemctl and /etc/systemd
        if [ -d "$_sysd" ] && type -t >/dev/null 'systemctl' ; then
            $CEN_TRACE -a -p $"Using 'systemd' (got 'systemctl' and '%s')" "$_sysd"
            return 0

        # strong systemd evidence: /sbin/init symlink to systemd
        else
            system -q -r -s _sysi -- readlink -f '/sbin/init'
            if [ "${_sysi##*/}" = 'systemd' ] ; then
                $CEN_TRACE -a -p $"Using 'systemd' ('%s' is symlink to systemd)" "$_sysi"
                return 0
            fi
        fi
        $CEN_TRACE $"Using 'SysV' init" ; return 1
    }

    # --- main part ---

    local _copt _kopt _popt _sopt _stat=0
    while [ "${1::1}" = "-" ] ; do
      case "$1" in
      --)   shift ; break ;;
      -c)   [ "$EUID" = "0" ] && _copt=1 ;;
      -k)   _kopt=1 ;;
      -p)   _popt=1 ;;
      -s)   _sopt=1 ;;
      -u)   [ -e "$CEN_LIBRARY/_centauri_bash_completion" ] || _copt=1
            [ "$CEN_ROOT/default/centauri-bash-lib" -nt \
              "$CEN_TOOLS/_centauri_bash_lib" ] && _popt=1
            [ -e "$CEN_LIBRARY/systemd" ] || _sopt=1 ;;
      *)    _cen_abort - "$1"
      esac ; shift
    done

    embed -m '_centauri_bash_run'                           # load modules ext/iom/run

    local _pcfg="$CEN_ROOT/centauri-bash-lib"
    if [ -f "$_pcfg" ] ; then
        $CEN_TRACE -a $"Using bootstrap config:" "$_pcfg"
    else
        _pcfg="$CEN_ROOT/default/centauri-bash-lib"
    fi

    _cen_run_config -p "$_pcfg" -r _cen_sys_read 'library' || _stat=$?  # override
    shortpath -q || _stat=$?                                # init paths cache

    [ -n "$_popt" -a -d "$CEN_TOOLS" ] && _cen_run_proxy    # generate proxy

    if [ -n "$_copt" -a -d "$CEN_LIBRARY" ] ; then          # bash completion
        _cen_sys_tools || _stat=$?
        _cen_sys_completion "${CEN_SYS_TOOLS[@]}" || _stat=$?
    fi

    if [ -n "$_sopt" ]  ; then
        if ! _cen_sys_systemd ; then
            remove -q -- "$CEN_ROOT/systemd"
            [ -e "$CEN_ROOT/systemd" ] && rename -b "disabled" -- "$CEN_ROOT/systemd"
        elif [ -d "$CEN_ROOT/systemd.disabled" ] ; then
            rename -o -- "$CEN_ROOT/systemd.disabled" "$CEN_ROOT/systemd"
        elif [ -d "$CEN_TOOLS/systemd" ] ; then
            remove $CEN_ROOT/systemd
            symlink -m -r -- "$CEN_TOOLS/systemd" "$CEN_ROOT/systemd"
        else
            folder -m "$CEN_ROOT/systemd"
        fi
    fi || _stat=$?
    return $_stat
}

# ------------------------------------------------------------------------------
# Init module
# ------------------------------------------------------------------------------

# the proxy does a 'embed -m _centauri_bash_sys' if the caller is root and the
# cache dir is missing to trigger a minimal setup ...

if [ "$1" != '-n' ] ; then
    if [ ! -d "$CEN_SYS_CACHE_DIR" ] && [ "$EUID" = "0" ] ; then
        # run a mimimal setup, but only if the library is installed
        [ -d "$CEN_SYS_STATE_DIR" -o -h "$CEN_SYS_STATE_DIR" ] && syssetup -t
    fi

    if [ "$1" = '-A' ] ; then               # module got auto-loaded ...
        [ "$EUID" = "0" ] && sysversion     # user root to init global cache
    else
        sysversion                          # get version info by default
    fi
fi
:

# end
