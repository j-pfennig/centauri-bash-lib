#!/usr/bin/bash
# ------------------------------------------------------------------------------
# _centauri_bash_mnt = centauri-bash-lib: Storage device mount support
#
# Call:     . _centauri_bash_mnt [-d|-m]
#
# Options:  -d  add command line option: -c --device  automount disk
#           -m  add command line option: -m --mount   automount storage
#
# General:  When loaded explicitly the module can add command line options
#           to a script, see module options above. The module options -c and
#           -m provide the same functionality but add different command line
#           options.
#
#           Automounting a disk or storage is handled by [[automount()]]. On
#           [[quit()]] an automounted disk or storage will be unmounted.
#
# Example:  Add command line option --mount for automount (and unmount):
#.          . _centauri_bash_mnt -m
#
# Copyright Dr. J. Pfennig (c) 2020-2025
# ------------------------------------------------------------------------------

CEN_MODULES['_centauri_bash_mnt']='0.16:6'

embed -c '_centauri_bash_utl'   # import on demand, see timer()

# used by findmount and automount

CEN_MOUNT_DEV=                  # device path
CEN_MOUNT_DIR=                  # mount dir
CEN_MOUNT_LBL=                  # mount label
CEN_MOUNT_FS=                   # fs type
CEN_MOUNT_ARR=()                # find by type

CEN_MOUNT_EXC=(cgroup cgroup2 proc \
               autofs binfmt_misc configfs bpf debugfs devpts devtmpfs efivarfs fusectl \
               hugetlbfs mqueue nfsd pstore ramfs rpc_pipefs securityfs sysfs tmpfs tracefs)

# used by automount()

CEN_MNT_OPT_D=                  # automount options ...
CEN_MNT_OPT_M=

declare -g -A CEN_MNT_AMAP      # automount map

# used by usermount()

CEN_MNT_USER_QDIR=              # mount folder for quit hook
CEN_MNT_USER_QOPT=              # options for quit hook

# used by location()

CEN_MNT_LOC_NAME=               # name array of well known locations
CEN_MNT_LOC_PATH=               # results ...
CEN_MNT_LOC_BASE=               # last base
CEN_MNT_LOC_DIST=               # last distribution

CEN_MNT_ERROR=                  # set by _cen_mnt_automount
CEN_MNT_MESSAGE=
CEN_MNT_PROGRESS=
CEN_MNT_OUT_MODE=               # output mode: quiet trace progress message

# ------------------------------------------------------------------------------
# automount - Automatic volume mount and unmount
#
# Call:     automount [-k <kind>] [-o <func>] [-r] [-b] [-m] [-w] <label>|<device>
#                     [-k <kind>] [-o <func>] [-r] [-c] [-u] <label>|<device>
#           automount [-o <func>] -q
#
# Options:  -b  btrfs check: add 'subvol=/' mount option
#           -c  check for automount (can be combined with -u)
#           -k  kind of device for output                      (default: device)
#           -m  do not register for automatic unmount
#           -o  output function: trace|message|quiet|progress  (default: auto)
#           -q  umount all automounts
#           -r  register for unmount (but do not mount)
#           -u  unmount now (see -c option)
#           -w  wait for device (before mount)
#
# Arguments:<kind>    describes device in messages (default: storage)
#           <func>    function called for output or progress reporting
#           <label>   fs label to be matched
#           <device>  device name to be matched
#
# Return:   **true** on success, see [[findmount()]] for the **CEN_MOUNT_**xxx variables
#           that are set.
#
# Example:  Automount a USB stick partition with label 'buster_vol0':
#.          automount -k "USB stick" -o progress -w "buster_vol0"
#
#
# It is recommended to use the CEN_HOOK_QUIT hook for automatic unmounting,
# which is the default (see -r option).
#
# The [[findmount()]] function is used to check if a device is already mounted.
# In this case it will not be mounted again and it will not be unmonted via
# [[quit()]]. After a successful mount [[findmount()]] is called again to set
# some **CEN_MOUNT_**xxx variables.
#
# The functions uses **/usr/bin/udisksctl** for mounting, which does not need
# root priviledges but does not allow to pass most mount options.
# ------------------------------------------------------------------------------
automount() {
    local _fbtr _fchk _fnun _freg _fwai _olvl _umnt
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --)   shift ; break ;;
        -b)    _fbtr=1 ;;
        -c)    _fchk=1 ;;
        -k)   shift ; _kind="$1" ;;
        -m)   _fnun=1 ;;
        -o)   shift ; _olvl="$1" ;;
        -q)   _umnt=2 ;;
        -r)   _umnt=3 ;;
        -u)   _umnt=1 ;;
        -w)   _fwai=1 ;;
        *)    _cen_abort - "$1"
        esac ; shift
    done
    _cen_mnt_output -o "$_olvl"                     # set output method
    [ -z "$_kind" ] && _kind=$"storage"

    local _desc="$1" _emsg _wmsg _labl _lmsg

    # is mount argument a label?
    if [ "${_desc::5}" = '/dev/' ] ; then
        _labl= ; _lmsg=$"device"
    elif [ "${_desc::1}" = '/' ] ; then
        _labl= ; _lmsg=$"path"
    else
        _labl='-c -l'; _lmsg=$"label"
    fi

    # -------
    # unmount
    # -------

    if [ "$_umnt" = 2 ] ; then                  # unmount all automounts
        local _mkey _mtyp _mdir="$PWD"
        folder -c '/'                           # may work in some cases
        for _mkey in "${!CEN_MNT_AMAP[@]}" ; do
            _mtyp="${_mkey%%:*}" ; [ "$_mtyp" = "$_mkey" ] && _mtyp=
            automount -k "$_mtyp" -u "${CEN_MNT_AMAP["$_mkey"]}"
        done
        folder -q -c "$_mdir"
        return 0

    elif [ -n "$_umnt" -o -n "$_fchk" ] ; then
        findmount $_labl "$_desc" || return 2   # device not found
        [ -n "$CEN_MOUNT_DIR" ] || return 1     # not mounted

        if [ "$_umnt" = 3 ] ; then              # register for unmount only
            _cen_automount_register "$_kind" "$CEN_MOUNT_DEV" "$_desc" "$_olvl"
            return 0
        elif [ -n "$_fchk" ] ; then
            # check if we also have an entry in automount map
            [ -z "${CEN_MNT_AMAP[$_kind:$CEN_MOUNT_DEV]}" ] && return 3
            [ -z "$_umnt" ] && return 0
        fi

        if [ "$PWD" -ef "$CEN_MOUNT_DIR" ] ; then
            _cen_automount_mesg -e -f $"Cannot unmount #K" \
                                      $"Current working directory is mountpoint"
            return 3
        fi

        unset CEN_MNT_AMAP[$_kind:$CEN_MOUNT_DEV]
        _cen_automount_mesg -i $"Unmount:  "
        for _umnt in 0.5 0.5 1 1 2 2 - ; do     # wait, may need time to flush
            if [ "$_umnt" = '-' ] ; then
                system -m -s _emsg -r -- udisksctl unmount -b "$CEN_MOUNT_DEV" && break
                _cen_automount_mesg -e -l $"Failed to unmount #K" "$_emsg"
                return 3                        # could not unmount
            fi
            system -q -r -- udisksctl unmount -b "$CEN_MOUNT_DEV" --no-user-interaction && break
            _cen_automount_mesg -w ; timer -w "$_umnt"
        done
        _cen_automount_mesg -d $"Unmounted:" ; return 0
    fi

    # --------------------
    # mount - check device
    # --------------------

    for _umnt in 0  0.6 0.6 0.6 0.6 0.6 1 1 1 1 1 1 1 \
                    2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 \
                    3 3 3 3 3 3 3 3 3 3 3 3 3  - ; do
        # is already mounted?
        if findmount $_labl "$_desc" ; then
            _cen_automount_mesg -p $"Found #K by #L '#A' at mountpoint '#F'"
            return 0
        fi

        # label or device not found
        [ -n "$CEN_MOUNT_DEV" ] && break        # device found
        if [ -n "$_fwai" ] ; then
            if [ "$_umnt" = 0 ] ; then
                _cen_automount_mesg -i $"Waiting for" ; continue
            elif [ "$_umnt" != '-' ] ; then
                _cen_automount_mesg -w ; timer -w "$_umnt" ; continue
            fi
        fi
        _cen_automount_mesg -e $"Cannot find #K by #L '#A'" ; return 1
    done

    # -----------------------
    # mount - mount via udisk
    # -----------------------

    _cen_automount_mesg -i $"Mounting:"
    local mopt
    if [ -n "$_fbtr" ] ; then
        findmount -i "$CEN_MOUNT_DEV"
        [ "$CEN_MOUNT_FS" = 'btrfs' ] && mopt='-o subvol=/'
    fi
    if system -m -r -s _emsg -- udisksctl mount -b "$CEN_MOUNT_DEV" $mopt ; then
        # successfull mount - register for unmount at quit
        [ -z "$_fnun" ] && _cen_automount_register "$_kind" "$CEN_MOUNT_DEV" "$_desc" "$_olvl"

        # check mountpoint (see CEN_MOUNT_DEV)
        _emsg="$CEN_MOUNT_DEV"
        for _umnt in 0.5 0.5 1 1 - ; do
            if [ "$_umnt" = '-' ] ; then
                _cen_automount_mesg -e -l $"Cannot find #K mountpoint"
                return 3
            fi
            findmount "$CEN_MOUNT_DEV" && break
            _cen_automount_mesg -w ; timer -w "$_umnt"
        done
        _cen_automount_mesg -d $"Mounted: " ; return 0
    fi

    # udisk mount failed
    _cen_automount_mesg -e -l $"Mounting #K failed" "$_emsg" ; return 2
}

# output message/progress: <mode> <msg1> <msg2>
#
# -d    write long message (overriding trace) in console mode
# -e    error message
# -f
# -i    progress increment
# -l
# -m    progress text -or- message
# -p    popup message
# -w    ... waiting
#
_cen_automount_mesg() {
    # _kind _desc _lmsg
    [ "$CEN_MNT_ERROR" = ':' ] && return 0              # quiet mode
    local _fout="$CEN_MNT_MESSAGE -a" _fcon _fpro _long

    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --)   shift ; break ;;
        -d)   _fpro=3 ; isfunction -c windows || _fcon=1 ;;
        -e)   _fout="$CEN_MNT_ERROR" ;;
        -f)   _long=2 ;;
        -i)   _fpro=1 ;;
        -l)   _long=1 ;;
        -m)   [ -n "$CEN_MNT_PROGRESS" ] && _fout='message -a' ;;
        -p)   [ -n "$CEN_MNT_PROGRESS" ] && _fout='message -a -d +3' ;;
        -w)   _fpro=2 ;;
        *)    _cen_abort - "$1"
        esac ; shift
    done
    local _msg1="$1" _msg2="$2" _mesg

    # handle -w
    if [ "$_fpro" = 2 ] ; then
        if [ -n "$CEN_MNT_PROGRESS" ] ; then
            $CEN_MNT_PROGRESS '.'
        elif [ -z "$_wmsg" ] ; then
            $CEN_MNT_MESSAGE -a $"... waiting for" "$_kind" ; _wmsg=1
        fi
        return 0
    fi

    # find output function for progress
    if [ -n "$_fpro" ] ; then
        _long=1 ; _msg1+=" #K "
        if [ -n "$CEN_MNT_PROGRESS" -o -n "$_fcon" ] ; then
            if [ -n "$_fcon" ] ; then
                [ "$CEN_MNT_MESSAGE" = 'message' -o \
                  "$CEN_MNT_MESSAGE" = 'trace' ] && _fout='message -a'
            else
                _long= ; _msg1+=$"by #L '#A' "
                _fout="$CEN_MNT_PROGRESS -a"
                [ "$_fpro" = 1 ] && _fout+=' -c 0 -t'
            fi
        fi
    fi

    # Short message: xxxxxx <kind> '<descr>' yyyyyy
    # Long  message: xxxxxx <kind> (<dtype> '<descr>' device <dev>) yyyyyy
    [ "$_long" = 1 -a "$_desc" = "$CEN_MOUNT_DEV" ] && _long=2
    [ "$_long" = 1 ] && _msg1+=$" (#L '#A' device '#D')"
    [ "$_long" = 2 ] && _msg1+=$" (#L '#A' folder '#F')"
    _msg1="${_msg1//#K/$_kind}" ; _msg1="${_msg1//#L/$_lmsg}" ; _msg1="${_msg1//#A/$_desc}"
    _msg1="${_msg1//#D/${CEN_MOUNT_DEV:-<none>}}" ; _msg1="${_msg1//#F/${CEN_MOUNT_DIR:-<none>}}"

    if [ -z "$_msg2" ] ; then
        $_fout -- "$_msg1"
    else
        $_fout -m -- "$_msg1\n$_msg2"
    fi
}

# register for quit hook: <kind> <dev> <desc> <levl>
_cen_automount_register() {
    CEN_MNT_AMAP["$1:$2"]="$3"
    $CEN_TRACE -a $"Registered for unmount:" "$1 $2"
}

# ------------------------------------------------------------------------------
# blkdevice - block device and mount status checker
#
# Call:     blkdevice [-a <rslt>] [-e|-f] [-s] [-d] [-i] [-p] [-m] <item>
#           blkdevice [-a <rslt>] [-e|-f] [-s] [-i] [-p] [-m] -n <part> <item>
#
#+          The function can check if a given name corresponds to a block device, if a
#           partition exists or if a device or a partition is mounted. It also can find
#           mount points and can generate a valid path name from a partition number.
#
# Options:  -a  result array to be used (default: CEN_BLKDEVICE)
#           -d  allow a block device    (default: -d -i -p)
#           -e  generate error messages
#           -f  generate fatal errors
#           -i  allow an image file     (default: -d -i -p)
#           -m  allow device <item> to be mounted
#           -n  partition number to generate a partition name
#           -p  allow a partition       (default: -d -i -p)
#           -s  silent, no trace messages
#           -x  error if device or partition do not exist
#
# Arguments:<item>      name or path of a block device or an image
#           <part>      a partition number (not relevant for mount check)
#           <rslt>      result array name
#
# Return:   **true** on success, **false** on error, sets result array
#
# Variables:always fills the result array (error/unused default values are '-'):
#           [0] device file path
#           [1] partition file path -or- empty string
#           [2] partition number    -or- **0**
#           [3] mountpoint          -or- **-**
#
#.Examples: # check if name is a block device and not mounted
#.          blkdevice -d -e "sda" || quit
#
#.          # check if name is a partition that is allowed to be mounted
#.          blkdevice -p -m -e "nvme0n1p1"
#.          [ "${CEN_BLKDEVICE[0]:--}" = '-' ] || message "Device is  ${CEN_BLKDEVICE[0]}"
#.          [ "${CEN_BLKDEVICE[3]:--}" = '-' ] || message "Mounted at ${CEN_BLKDEVICE[3]}"
#
#.          # check if a partition exists (allowed to be mounted)
#.          if blkdevice -m -n 3 -x "nvme0n1" ; then
#.              message "Partition is '${CEN_BLKDEVICE[1]}'"
#.              if [ "${CEN_BLKDEVICE[3]}" = '-' ] ; then
#.                  message -a "Partition not mounted"
#.              else
#.                  message -a "Mounted at '${CEN_BLKDEVICE[3]}'"
#.              fi
#.          else
#.              message "Partition '${CEN_BLKDEVICE[1]}' not found"
#.          fi
# ------------------------------------------------------------------------------
CEN_BLKDEVICE=
blkdevice() {
    local _fblk _fexi _fimg _fpar _fmnt _npar _oerr='trace -a' _otra='trace -a' _anam='CEN_BLKDEVICE'
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --)   shift ; break ;;
        -a)   shift ; _anam="$1" ;;
        -d)   _fblk=1 ;;
        -e)   _oerr='error' ;;
        -f)   _oerr='fatal' ;;
        -i)   _fimg=1 ;;
        -m)   _fmnt=1 ;;
        -n)   shift ; _npar="$1" ;;
        -p)   _fpar=1 ;;
        -s)   _otra=':' ;;
        -x)   _fexi=1 ;;
        *)    _cen_abort - "$1"
        esac ; shift
    done
    if [ -z "$_fblk$_fpar$_fimg" ] ; then           # set default options
        _fblk=1 ; _fpar=1 ; _fimp=1
    fi
    [ "${_npar:-0}" = 0 ] || _fpar=                 # disallow partition

    local -n _cen_blkdevice_varr="$_anam"
    local _path="$1" _name="${1##*/}" _pref
    if [ "$_name" = "$_path" ] ; then               # no slash, make path
        if [ -e "$_path" ] ; then
            _path="$PWD/$_path"
        elif [ -e "/dev/$_path" ] ; then
            _path="/dev/$_path"
        fi
    fi
    _cen_blkdevice_varr=("$_path" '-' '-' '-')      # default return values

    # check for file or block device
    if [ -b "$_path" -o -n "$_npar" ] ; then
         :
    elif [ -n "$_fimg" ] && [ "${_path::5}" != '/dev/' ] ; then
        if [ -d "$_path" -o ! -e "$_path" ] ; then
            $_oerr $"No such image file:" "$_path" ; return 1
        fi
        system -e -p -r -s _path -- readlink -e "$_path" || return 1
        _cen_blkdevice_varr[0]="$_path"
    else
        $_oerr $"Not a block device:" "$_path" ; return 1
    fi

    # partition prefix char: <name> := <base><pref><partition>
    case "$_name" in
        [sh]d[a-z]*)    ;;
        *)              _pref='p'
    esac

    # check if mounted
    local _item _xxxx _pmnt _ptyp _leng="${#_path}" _merr _mchk
    [ -n "$_npar" ] && _mchk="$_path$_pref$_npar" || _mchk="$_path"

    while read -r _item _pmnt _ptyp _xxxx ; do
        [ "$_ptyp" = 'autofs' ] && continue         # ignore these!
        [ "${_item::_leng}" = "$_path" ] || continue
        printf -v _item "${_item//%/$'\n'}"         # handle escapes, protect %
        printf -v _pmnt "${_pmnt//%/$'\n'}"
        _item="${_item//$'\n'/%}"                   # restore %
        _pmnt="${_pmnt//$'\n'/%}"
        _merr=1                                     # device is mounted
        [ "$_item" = "$_mchk" ] || continue         # this partititon?
        _cen_blkdevice_varr[3]="$_pmnt" ; break
    done < '/proc/mounts'
    if [ -z "$_fmnt" -a -n "$_merr" ] ; then
        $_oerr $"Device is mounted:" "$_path (${_cen_blkdevice_varr[3]})" ; return 1
    fi

    # validate device type
    _item="/sys/class/block/$_name"
    if [ -e "$_item/partition" ] ; then
        read _xxxx <"$_item/partition"               # read partition number
        _cen_blkdevice_varr[0]="${_path%$_pref$_xxxx}"
        _cen_blkdevice_varr[1]="$_path"
        _cen_blkdevice_varr[2]="$_xxxx"
        if [ -z "$_fpar" ] ; then
            $_oerr $"Cannot use a partition:" "$_path" ; return 1
        fi
        $_otra $"Using partition:" "$_path"
    elif [ -e "$_item" ] ; then
        _cen_blkdevice_varr[1]=
        _cen_blkdevice_varr[2]=0
        if [ -z "$_fblk" ] ; then
            $_oerr $"Cannot use a block device:" "$_path" ; return 1
        fi
        $_otra $"Using block device:" "$_path"
    elif [ "$_npar" = 0 ] ; then
        _cen_blkdevice_varr[0]="${_path%$_pref[1-9]*}"
        _cen_blkdevice_varr[1]="$_path"
        _cen_blkdevice_varr[2]="${_path:${#_cen_blkdevice_varr[0]}}"
    elif [ -z "$_npar" ] ; then
        if [ -z "$_fimg" ] ; then
            $_oerr $"Cannot use a file:" "$_path" ; return 1
        fi
        $_otra $"Using an image file:" "$_path"
    fi

    # check if existing, generate a partition name
    if [ "${_npar:-0}" = 0 ] ; then                 # device or partition
        _item="${_cen_blkdevice_varr[0]}"
    else                                            # add partition
        _cen_blkdevice_varr[1]="$_path$_pref$_npar"
        _cen_blkdevice_varr[2]="$_npar"
        _item="${_cen_blkdevice_varr[1]}"           # partition
    fi
    [ -z "$_fexi" ] && return 0                     # don't check
    [ -b "$_item" ] && return 0                     # existing
    $_oerr $"Not a block device:" "$_item" ; return 1
}

# ------------------------------------------------------------------------------
# findmount - Find device or mountpoint or get a list of mounts
#
# Call:     findmount [-d|-i] <device>|<mountpoint>         # searches ...
#           findmount [-d|-i] <device>|- [<mountpoint>|-]
#           findmount [-d|-i] <type> <mountpoint>
#           findmount [-c] [-d] -l <label>
#           findmount -r <kind> <device>
#           findmount -t <type> [-t <type>]...              # lists ...
#           findmount -a [-t <type>]...
#
# Options:  -a  get all (real) mount infos into CEN_MOUNT_ARR
#           -c  also try upper/lower case label
#           -d  return **true** if device is found but not mounted
#           -i  get CEN_MOUNT_FS even if not mounted
#           -l  find by label
#           -r  get identifier for device into CEN_MOUNT_LBL
#           -t  find by type (returns CEN_MOUNT_ARR array)
#
# Arguments:<device>     device to find, example '/dev/sdc1'
#           <mountpoint> mount location, example '/mnt/xxx'
#           <label>      partition label to find
#           <kind>       type of identifier: label, partlabel, uuid, partuuid
#           <type>       filesystem type to find (returns array). Use '+' to
#                        get all types and '-' for types not in CEN_MOUNT_EXC.
#
# Return: **true** at success or **false** otherwise. Also some variables are set.
#
# Variables:The following variables are set if option -a or -t are not used:
#
#     CEN_MOUNT_DEV  -  device path
#     CEN_MOUNT_DIR  -  mount dir
#     CEN_MOUNT_LBL  -  mount label
#     CEN_MOUNT_FS   -  fs type
#
#     With option -a or -t an array is returned:
#
#     CEN_MOUNT_ARR  -  without option -a only the device paths of mounts matching
#     °                 the types are returned. With -a option all "/proc/mounts"
#     °                 fields are returned, separated by tabulators.
#
#     CEN_MOUNT_EXC  -  a predefined list of exclusion used with -t '-'.
#
#     In "/proc/mounts" the mount dir might contain escapes. The returned value is
#     always unescaped by this function; path names with tabulator chars won't work.
#
#.Examples: # find mounted network filesystems by type
#.          findmount -t cifs -t nfs -t nfs4
#.          quit -p "Found % mounted network filesystems" "${#CEN_MOUNT_ARR[@]}"
#.          findmount -t -
#.          quit -p "Found % mounted filesystems" "${#CEN_MOUNT_ARR[@]}"
#
#.          # find device by label
#.          findmount -d -l "my-drive" || quit "device not mounted"
#
#.          # get label for device
#           findmount -r label /dev/sda1 && message "Label:" "$CEN_MOUNT_DIR"
#
#.          # what is mounted at /mnt/xxx?
#.          findmount - "/mnt/xxx" && message -p \
#.              "device=%s (%s filesystem)" "$CEN_MOUNT_DEV" "$CEN_MOUNT_FS"
#
#.          # what is mounted on /dev/sda?
#.          findmount -t - -d "/dev/sda"
#.          splitjoin -x 'message -a Mountpoint:' -i CEN_MOUNT_ARR
#
#.          # get list of mounts: <device> <mountpoint> <fstype> <options>
#.          findmount -a
#.          splitjoin "message -a" -i CEN_MOUNT_ARR
# ------------------------------------------------------------------------------
findmount() {
    CEN_MOUNT_DEV= ; CEN_MOUNT_DIR= ; CEN_MOUNT_LBL= ; CEN_MOUNT_FS= ; CEN_MOUNT_ARR=()
    local _labl _fall _fknd _fcas _fdev _ftyp=()
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --)   shift ; break ;;
        -)    break ;;
        -a)   _fall=1 ;;
        -c)   _fcas=1 ;;
        -d)   _fdev=1 ;;
        -i)   _fdev=2 ;;
        -l)   shift ; _labl="$1" ;;
        -r)   shift ; _fknd="$1" ;;
        -t)   shift ; _ftyp+=("$1") ;;
        *)    _cen_abort - "$1"
        esac ; shift
    done

    local _mxxx _mdev="${1:--}" _mdir="$2"
    [ -z "$_mdir" ] && _mdir="$_mdev"

    # find by type
    [ -n "$_fall" -a -z "$_ftyp" ] && _ftyp='-'                 # default: real fs
    if [ -n "$_ftyp" ] ; then
        local _mitm _mmfs _mopt
        while read -r _mitm _mdir _mmfs _mopt _mxxx ; do
            [ -n "$_fdev" ] && [ "${_mitm::${#_mdev}}" != "$_mdev" ] && continue
            _cen_findmount_type "$_mmfs" "${_ftyp[@]}" || continue
            printf -v _mitm "${_mitm//%/$'\n'}"                 # handle escapes, protect %
            printf -v _mdir "${_mdir//%/$'\n'}"
            _mitm="${_mitm//$'\n'/%}"                           # restore %
            _mdir="${_mdir//$'\n'/%}"
            if [ -n "$_fall" ] ; then
                CEN_MOUNT_ARR+=("$_mitm"$'\t'"$_mdir"$'\t'"$_mmfs"$'\t'"$_mopt")
            else
                CEN_MOUNT_ARR+=("$_mdir")
            fi
        done < "/proc/mounts"
        return 0

    # find device by kind
    elif [ -n "$_fknd" ] ; then
        [ "${_mdev::1}" = '/' ] || return 1                    # cannot have a label
        for _mxxx in "/dev/disk/by-$_fknd/"* ; do
            [ "$_mdev" -ef "$_mxxx" ] || continue
            CEN_MOUNT_DEV="$_mdev"
            CEN_MOUNT_DIR="$_mxxx"
            CEN_MOUNT_LBL="${_mxxx##*/}" ; return 0
        done
        return 1

    # find device by label
    elif [ -n "$_labl" ] ; then
        for _labl in "$_labl" "${_labl,,}" "${_labl^^}" "" ; do
            [ "$_mxxx" = "$_labl" ] && continue                 # same as initial case
            [ -h "/dev/disk/by-label/$_labl" ] && break         # found!
            [ -z "$_fcas" -o -z "$_labl" ] && return 1          # last try, not found
            [ -z "$_mxxx" ] && _mxxx="$_labl"
        done
        CEN_MOUNT_LBL="$_labl"
        system -r -q -s _mdev -- readlink -f "/dev/disk/by-label/$_labl"
        $CEN_TRACE -a -r -b 0 "${FUNCNAME[0]}: '$_labl' => '$_mdev'"
    fi

    # search mount table
    while read -r CEN_MOUNT_DEV CEN_MOUNT_DIR CEN_MOUNT_FS _mxxx ; do
        printf -v CEN_MOUNT_DEV "${CEN_MOUNT_DEV//%/$'\n'}"     # handle escapes, protect %
        printf -v CEN_MOUNT_DIR "${CEN_MOUNT_DIR//%/$'\n'}"
        CEN_MOUNT_DEV="${CEN_MOUNT_DEV//$'\n'/%}"               # restore %
        CEN_MOUNT_DIR="${CEN_MOUNT_DIR//$'\n'/%}"
        if [ "${CEN_MOUNT_DEV::1}" != '/' ] ; then              # a file system
             [ "$_mdev" = '*' -o "$_mdev" = "$CEN_MOUNT_DEV" ] || continue
             [ "$_mdir" = "$_mdev" ] && return 0
        elif [ "$_mdev" -ef "$CEN_MOUNT_DEV" ] ; then           # a device
            [ "${_mdev::5}" = '/dev/' ] && return 0
        fi
        if [ "$_mdir" -ef "$CEN_MOUNT_DIR" ] ; then
            [ "${_mdir::5}" = '/dev/' ] || return 0
        fi
    done < '/proc/mounts'

    # not mounted
    [ "$_fdev" = 2 ] && system -e -p -r -s CEN_MOUNT_FS -- lsblk -n -b -d -o FSTYPE "$_mdev"
    CEN_MOUNT_DEV="$_mdev"
    [ -b "$CEN_MOUNT_DEV" ] || CEN_MOUNT_DEV=
    [ -z "$_fdev" ] && return 1
    [ -n "$CEN_MOUNT_DEV" ]                     # return status
}

# filter by type: <current> <types>
_cen_findmount_type() {
    local _trun _texc _tcur="$1" ; shift
    for _trun in "$@" ; do
        if [ "$_trun" = '-' ] ; then
            for _texc in "${CEN_MOUNT_EXC[@]}" '-' ; do
                [ "$_texc" = '-' ] && return 0                  # not in excludes
                [ "$_texc" = "$_tcur" ] && break                # excluded, skip
            done
        elif [ "$_trun" = "$_tcur" -o "$_trun" = '+' ] ; then
            return 0                                            # simple match
        fi
        shift
    done
    return 1
}

# ------------------------------------------------------------------------------
# usermount - Mount using sudo create mountpoint unmount on quit
#
# Call:     usermount [-e|-f|-w] [-r] [-p] [-o <func>] ...
#           usermount ... [-m <mpnt>] [-s <vnam>] [-n] [--] <dev> <opt>...
#           usermount ... [-m <mpnt>] [-s <vnam>] -l [-n] [--] <labl> <opt>...
#           usermount ... -u [--] <dev>|<mpnt>
#
# Options:  -b  btrfs check: add 'subvol=/' mount option
#           -e  report errors
#           -f  make errors fatal
#           -l  mount by label
#           -m  specify a mount-point
#           -n  no unmount on quit
#           -o  output function: trace|message|quiet|progress  (default: auto)
#           -p  try sudo to get root privileges
#           -r  ignore dryrun
#           -s  save mount-point to variable (default is: CEN_USERMOUNT)
#           -u  unmount now
#           -w  report errors as warning
#
# Arguments:<dev>   block device to be mounted
#           <labl>  device label
#           <mpnt>  mount-point
#           <opt>   mount options
#           <vnam>  variable name
#
#.Examples: usermount -f -p -- "/dev/sda" subvol=/
#.          message "Mounted at:" "$CEN_USERMOUNT"
#
#.          usermount -e -p -m "myfolder" -- "/dev/sda"
#
#.          usermount -e -b -l -p -- "my_disk"
#
#+unmount: If not using -n (quit does unmount) this function handles only one
# mount at a time. Mounting another device without -n automatically unmounts
# the previous mount. This is intentionally be used to switch between devices.
#
#+         If the current working folder is equal to the active mount-point the
# current folder is set to '/'.
# ------------------------------------------------------------------------------
CEN_USERMOUNT=
usermount() {
    local _mesg='trace -a -c " "' _vnam='CEN_USERMOUNT'
    local _oerr='-q' _olbl _obtr _olvl _mpnt _nunm _rdry _priv _devi _devu _stat
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --) shift ; break ;;
        -b) _obtr=1 ;;
        -e|-f|-w)
            _oerr="$1 -p" ; _mesg="error $1" ;;
        -l) _olbl='-L' ;;
        -m) shift ; _mpnt="$1" ;;
        -n) _nunm=1 ;;
        -o) shift ; _olvl="$1" ;;
        -p) _priv='-u -' ;;
        -r) _rdry='-r' ;;
        -s) shift ; _vnam="$1" ;;
        -u) _devu=1 ;;
        *)  _cen_abort - "$1"
        esac ; shift
    done
    _devi="$1" ; shift
    _cen_mnt_output -o "$_olvl"                     # set output method

    if [ -n "$_devu" ] ; then
        [ "$#" = 0 ] || _cen_abort '@'              # too many arguments
        _devu="$_devi" ; _devi=
    elif [ "${CEN_MNT_USER_QDIR:--}" != '-' ] ; then
        _devu="$CEN_MNT_USER_QDIR"
    fi

    # --- unmount ---

    if [ -n "$_devu" ] ; then
        if ! findmount -- "$_devu" ; then
            $CEN_TRACE -c ' ' $"Not mounted:" "$_devu" ; return 0
        fi
        _devu="$CEN_MOUNT_DEV" ; _mpnt="$CEN_MOUNT_DIR"
        _cen_mnt_output -p -l $"Unmounting '$_devu' ..."
        [ "$PWD" -ef "$_mpnt" ] && folder -c '/'
        system $_oerr $_rdry $_priv -- umount "$_devu" ; _stat="$?"
        _cen_mnt_output -a -p $"Unmounted '%s' from '%s'" "$_devu" "$_mpnt"
        [ "$CEN_MNT_USER_QDIR" = "$_mpnt" ] && CEN_MNT_USER_QDIR='-'
        [ -z "$_devi" ] && _mpnt=
    fi

    # --- mount ---

    if [ -n "$_devi" ] ; then
        _cen_mnt_output -p -l "Mounting '$_devi' ..."
        if [ "${_mpnt:--}" = '-' ] ; then           # temporary mount-point
            tmpfile -n -s _mpnt ; folder -f -m $_rdry -- "$_mpnt"
        fi
        if [ -n "$_obtr" ] ; then                   # btrfs check
            local _temp='--'
            [ -n "$_olbl" ] && _temp='-l'
            findmount -i $_temp "$_devi"
            [ "$CEN_MOUNT_FS" = 'btrfs' ] && set -- 'subvol=/' "$@"
        fi
        system $_oerr $_rdry $_priv -g 0 -- mount $_olbl "$_devi" "$_mpnt" ${1:+-o} "$@"
        _stat="$?"
        if [ "$_stat" = 0 ] ; then
            _cen_mnt_output -a "Mounted '$_devi' at '$_mpnt'"
            if [ -z "$_nunm" ] ; then
                CEN_MNT_USER_QDIR="$_mpnt"
                CEN_MNT_USER_QOPT="${_priv:+-p }$_rdry"
            fi
        fi
    fi
    printf -v "$_vnam" '%s' "$_mpnt" ; return "$_stat"
}

# ------------------------------------------------------------------------------
# location - Find sub-volume or partition of standard locations
#
# Call:     location [-e|-f|-w ] [-b <base>] [-d <dist>] [-a|-s <vnam>] [-m] [-n] [--] <name>
#
# Options:  -a  result array: path label device
#           -b  mount point or device (default is '/')
#           -d  override current distribution
#           -e  report no-finds as error
#           -f  make errors fatal
#           -m  ''location'' must be a mount-point
#           -n  do not trigger mounts for automount volumes
#           -s  save path in variable (default is CEN_LOCATION)
#           -w  report no-finds as warning
#
# Arguments:<base>  a base folder (default is '/')
#           <dist>  linux distribution nick name
#           <vnam>  variable to return a result
#           <name>  location name (volume or folder)
#
#+Volume names are case sensitive (<name> argument) but mountpoint folder names are
# always lower case.
#
#+Special <name> values are:
#
#, "[linux]"    for the linux UKI image folder
#, "[boot]"   "*/efi" or "*/EFI" for EFI boot
#, °            "*/grub            for GRUB boot
#, °            "*/firmware" or "*/overlay" otherwise (Raspberry Pi)
#, "[swap]"     for the swap partion
#
# Returns:  **true** on success -or- **false** for no match
#
#+Cache: The ''location'' search results are cached until a different base is set.
# This makes the location function quite fast if called repeatedly for cached locations.
# Use a dummy base like '.' to flush the cache explicitly.
#
#.Examples: # check if 'export' is a mounted sub-volume
#.          location -m 'exports' && message -c 'export is' "$CEN_LOCATION"
#
#.          # get swap the partion of a device
#.          if location -b '/dev/sdb' 'swap' ; then
#.              message -p "Device '%s' swap partition is '%s'" '/dev/sdb' $CEN_LOCATION'
#.          else
#.              message -p "Device '%s' has no swap partition" '/dev/sdb'
#.          fi
# ------------------------------------------------------------------------------
location() {
    local base dist vnam='CEN_LOCATION' omnt mesg='trace -a' indx nmnt stat=0
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --) shift ; break ;;
        -e|-f|-w)
            mesg="error $1" ;;
        -a) shift ; vnam= ; local -n _cen_location_varr="$1" ;;
        -b) shift ; base="${1%/}" ;;
        -d) shift ; dist="$1" ;;
        -m) omnt=1 ;;
        -n) nmnt=1 ;;
        -s) shift ; vnam="${1:--}" ;;
        *)  _cen_abort - "$1"
        esac ; shift
    done

    # get distribution, check base
    if [ "${dist:--}" = '-' ] ; then
        [ -z "$CEN_SYS_NICKNAME" ] && sysversion -o -u
        dist="$CEN_SYS_NICKNAME"
    elif [ -n "${dist//[a-z]/}" ] ; then
        error $"Invalid distribution name:" "$dist" ; return 2
    fi
    if [ -n "$base" -a "$base" != "$CEN_MNT_LOC_BASE" ] ; then
        folder -- "$base" || return 2
    fi

    # initialize, drop cache
    if [ "$base" != "$CEN_MNT_LOC_BASE" -o "$dist" != "$CEN_MNT_LOC_DIST" ] ; then
        CEN_MNT_LOC_NAME=() ; CEN_MNT_LOC_PATH=()
        CEN_MNT_LOC_DIST="$dist" ; CEN_MNT_LOC_BASE="$base"
        trace -a -c -p -- - 'base=%s  distribution=%s' "${base:-/}" "$dist"
    fi
    if [ -z "$CEN_MNT_LOC_NAME" ] ; then
        CEN_MNT_LOC_NAME=('swap' 'root')
        CEN_MNT_LOC_PATH=(''     '')
    fi

    # get index from cache
    listsearch -c -i CEN_MNT_LOC_NAME -n indx -- "$1"
    if [ -z "$indx" ] ; then
        indx="${#CEN_MNT_LOC_NAME[@]}"
        CEN_MNT_LOC_NAME[indx]="$1" ; CEN_MNT_LOC_PATH[indx]=''
    fi

    # search if not in cache
    if [ -z "${CEN_MNT_LOC_PATH[indx]}" ] ; then
        _cen_mnt_loc_find "$indx" "$1"
        [ -z "${CEN_MNT_LOC_PATH[indx]}" ] && CEN_MNT_LOC_PATH[indx]='-'
    fi
    if [ "${CEN_MNT_LOC_PATH[indx]}" = '-' ] ; then
        $mesg -p $"Location '%s' not found: %s" "$1" "${base:-/}" ; stat=1
    fi

    if [ -n "$vnam" ] ; then                        # return path string
        printf -v "$vnam" '%s' "${CEN_MNT_LOC_PATH[indx]}"
    else                                            # return info array
        local idev iloc="${CEN_MNT_LOC_PATH[indx]}"
        case "$1" in
        '[linux]'|'[boot]')
                    findmount "${iloc%/*}" || findmount "$iloc" ;;
        '[swap]')   CEN_MOUNT_DEV="$iloc" ; iloc='-' ;;
        *)          findmount "$iloc"
        esac
        local idev="$CEN_MOUNT_DEV" ; findmount -r label "$idev"
        _cen_location_varr=("$iloc" "${CEN_MOUNT_LBL:--}" "${idev:--}")
    fi
    return "$stat"
}

_cen_mnt_loc_find() {
    local volu voll item
    if [ "$2" = '[linux]' ] ; then
        matchpath -s CEN_MNT_LOC_PATH[$1] -d -o -- \
                  "$base/mnt/boot"/[Ee][Ff][Ii]/image-$dist "$base/boot"/[Ee][Ff][Ii]/image-$dist \
                  "$base/mnt/boot"/[Ee][Ff][Ii]/image       "$base/boot"/[Ee][Ff][Ii]/image \
                  "$base/image-$dist"                       "$base/image"
        return
    elif [ "$2" = '[boot]' ] ; then
        matchpath -s CEN_MNT_LOC_PATH[$1] -d -o -- \
                  "$base/mnt/boot"/[Ee][Ff][Ii]  "$base/boot"/[Ee][Ff][Ii]  "$base"/[Ee][Ff][Ii] \
                  "$base/mnt/boot/grub"          "$base/boot/grub"          "$base/grub" \
                  "$base/mnt/boot/firmware"      "$base/boot/firmware"      "$base/overlays"
        [ "${CEN_MNT_LOC_PATH[$1]}" = "$base/overlays" ] && CEN_MNT_LOC_PATH[$1]="$base"
        return
    elif [ "$2" = '[swap]' ] ; then
        findmount - "${base:-/}"                    # get device for lsblk
        case "$CEN_MOUNT_DEV" in                    # glob for partions ...
        *p[0-9])   volu="${CEN_MOUNT_DEV%p?}p?" ;;
        *[0-9])    volu="${CEN_MOUNT_DEV%?}?" ;;
        *)         return                           # no device found
        esac
        system -q -a volu -- lsblk -o NAME,FSTYPE -l -n $volu || return
        listsearch -c -g -i volu -m item -- '* swap*' || return
        item="/dev/${item%% *}"
        [ -b "$item" ] && CEN_MNT_LOC_PATH[$1]="$item"
        return
    fi

    # Volume name may be uppercase, mountpoints are always lower case
    volu="$2" ; voll="${2,,}"

    for item in "$base"/mnt/vol?/Volumes "$base/Volumes" ; do
        [ -d "$item" ] || continue

        if [ "$item" = "$base/Volumes" ] ; then
            if [ -d "$item/$volu-$dist" ] ; then
                CEN_MNT_LOC_PATH[$1]="$item/$volu-$dist"
            elif [ -d "$item/$volu" ] ; then
                CEN_MNT_LOC_PATH[$1]="$item/$volu"
            else
                continue
            fi

        elif [ "$volu" = 'Root' ] ; then            # should always be mounted
            if [ -d "$item/Root-$dist" ] ; then
                CEN_MNT_LOC_PATH[$1]="$item/Root-$dist"
            elif [ "$item/$volu" -ef "$base/" ] ; then
                CEN_MNT_LOC_PATH[$1]="$item/Root"
            else
                continue
            fi

        elif [ -d "$item/$volu-$dist" ] ; then
            CEN_MNT_LOC_PATH[$1]="$item/$volu-$dist"
        elif [ "$item/$volu" -ef "$base/$voll" ] ; then
            CEN_MNT_LOC_PATH[$1]="$item/$volu"

        else
            [ -s "$base/mnt/$voll/xxx" ]            # trigger automount
            if [ "$item/$volu" -ef "$base/mnt/$voll" ] ; then
                CEN_MNT_LOC_PATH[$1]="$item/$volu"
            else
                continue
            fi
        fi
        trace -a -c -p "sub-volume" '%-9s %s' "$volu" "$item/$volu"
        return
    done

    if [ "$voll" = 'root' ] && [ -d "$base/dev" ] ; then
        CEN_MNT_LOC_PATH[$1]="${base:-/}"
    elif [ -n "$omnt" ] ; then
        :
    elif [ -d "$base/mnt/$voll" ] ; then
        trace -a -c -p "mountpoint" '%-9s %s' "$volu" "$base/mnt/$voll"
        CEN_MNT_LOC_PATH[$1]="$base/mnt/$voll"
    elif [ -d "$base/$voll" ] ; then
        trace -a -c -p "folder" '%-9s %s' "$volu" "${base%/}/$voll"
        CEN_MNT_LOC_PATH[$1]="${base%/}/$voll"
    fi
}

# ------------------------------------------------------------------------------
# options() hook: <option> <argument>
# ------------------------------------------------------------------------------
_cen_mnt_option() {
    case "$1" in

    # handle automount

    '')
        [ -n "$CEN_MNT_OPT_D" -a -n "$CEN_OPT_DEVICE" ] &&
            automount -k $"disk" -o progress -w -- "$CEN_OPT_DEVICE"
        [ -n "$CEN_MNT_OPT_M" -a -n "$CEN_OPT_MOUNT" ] &&
            automount -k $"storage" -o progress -w -- "$CEN_OPT_MOUNT"
        ;;

    # pass option info to usage module

    --help)
        [ "$2" = 'opts' ] && _cen_mnt_add_opts ;;

    # options added by this module

    -c|--dev*)
        [ -n "$CEN_MNT_OPT_D" ] && optarg 'device' - -t ;;
    -m|--mou*)
        [ -n "$CEN_MNT_OPT_M" ] && optarg 'mount'  - -t ;;

    esac
    $CEN_MNT_HOOK_OPTIONS "$@"
}

# helper for _cen_mnt_options
_cen_mnt_add_opts() {
    [ -n "$CEN_MNT_OPT_D" ] && _cen_use_option '-c' '--device  <disk>' $"Automount disk by path or label"
    [ -n "$CEN_MNT_OPT_M" ] && _cen_use_option '-m' '--mount   <strg>' $"Automount storage by path or label"
}

# ------------------------------------------------------------------------------
# Configure output: <mode>
# ------------------------------------------------------------------------------
_cen_mnt_output() {
    case "$1" in
    -o)   shift ; CEN_MNT_OUT_MODE="$1" ;;
    -a)   shift
          if [ "$CEN_MNT_PROGRESS" = ':' ] ; then
            $CEN_MNT_MESSAGE "$@"
          else
            $CEN_MNT_PROGRESS "$@"
          fi
          return ;;
    -m)   shift ; $CEN_MNT_MESSAGE "$@" ; return ;;
    -p)   shift ; $CEN_MNT_PROGRESS "$@" ; return ;;
    *)    _cen_abort - "$1"
    esac

    # output method
    if [ "${CEN_MNT_OUT_MODE:-auto}" = 'auto' ] ; then
        [ -n "$CEN_MNT_ERROR" ] && return
        CEN_MNT_OUT_MODE='message -a'
        if [ -n "$CEN_OPT_SILENT" ] ; then
            CEN_MNT_OUT_MODE='trace -a'
        elif isfunction -c windows ; then
            CEN_MNT_OUT_MODE='trace -a'
        fi
    fi

    CEN_MNT_ERROR='error' ; CEN_MNT_MESSAGE="$CEN_TRACE" ; CEN_MNT_PROGRESS=':'
    case "$CEN_MNT_OUT_MODE" in
    qui*)      CEN_MNT_MESSAGE=':' ; CEN_MNT_ERROR=':' ;;
    mes*|msg)  CEN_MNT_MESSAGE='message -a'  ;;
    pro*)      if isfunction -c console || isfunction -c windows ; then
                    CEN_MNT_PROGRESS='progress -a -l'
               else
                    CEN_MNT_MESSAGE='message -a'
               fi ;;
    err*)      CEN_MNT_MESSAGE=':' ;;
    esac
}

# ------------------------------------------------------------------------------
# Startup
# ------------------------------------------------------------------------------

# called from _quit() to unmount devices
_cen_mnt_quit() {
    if [ "${CEN_MNT_USER_QDIR:--}" != '-' ] ; then
        $CEN_TRACE -a -c 'usermount' $"Running quit function:" "$CEN_MNT_USER_QDIR"
        usermount $CEN_MNT_USER_QOPT -u -- "$CEN_MNT_USER_QDIR"
    fi

    if [ "${#CEN_MNT_AMAP[@]}" != 0 ] ; then
        $CEN_TRACE -a -c 'automount' $"Running quit function:" "${#CEN_MNT_AMAP[@]} mounts"
        automount -q
    fi
}

while [ "${1::1}" = '-' ] ; do
    case "$1" in
    --)   shift ; break ;;
    -d)   CEN_MNT_OPT_D=1 ;;
    -m)   CEN_MNT_OPT_M=1 ;;
    esac ; shift
done

CEN_MNT_HOOK_OPTIONS="$CEN_HOOK_OPTIONS"
CEN_HOOK_OPTIONS=_cen_mnt_option

:

# end
